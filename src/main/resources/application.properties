logging.config=classpath:logback-base.xml
pn.env.runtime=PROD
spring.application.name=PN-TEMPLATE-MS-BE
#Setting CloudWatch logging level to info, to make CloudWatchMetricPublisher logs visible.
logging.level.software.amazon.awssdk.metrics.publishers.cloudwatch=info

spring.task.execution.pool.max-size=${PnSsTaskExecutionPoolMaxSize:512}

spring.codec.max-in-memory-size=${SpringCodecMaxInMemorySize:10000000}

internal.base.url=${InternalBaseUrl:http://localhost:8080}

### MANAGER REPOSITORY ENDPOINT ###
# <-- Manager Document Client-->
gestore.repository.anagrafica.internal.docClient=/safestorage/internal/v1/documents/%s
gestore.repository.anagrafica.internal.docClient.post=/safestorage/internal/v1/documents/

# <-- Manager Type Document client -->
gestore.repository.anagrafica.internal.docTypes=/safestorage/internal/v1/doctypes/%s
gestore.repository.anagrafica.docTypes=/safe-storage/v1/configurations/documents-types/%s

# <-- Manager User configuration client -->
gestore.repository.anagrafica.internal.userConfiguration= /safestorage/internal/v1/userConfigurations/%s
gestore.repository.anagrafica.userConfiguration= /safe-storage/v1/configurations/clients/%s

# <-- Manager Scadenza Documenti client -->
gestore.repository.anagrafica.internal.scadenza.documenti.post=/safestorage/internal/v1/scadenza-documenti/

# <-- Manager Tags client -->
gestore.repository.anagrafica.internal.tags.get=/safestorage/internal/v1/tags/%s
gestore.repository.anagrafica.internal.tags.put=/safestorage/internal/v1/documents/%s/tags

gestore.repository.configuration.api.current.client.config=/safe-storage/v1/configurations/clients/%s
gestore.repository.configuration.api.documents.config=/safe-storage/v1/configurations/documents-types

# <-- Manager retry strategy -->
gestore.repository.retry.strategy.max-attempts=${PnSsGestoreRepositoryRetryStrategyMaxAttempts:3}
gestore.repository.retry.strategy.min-backoff=${PnSsGestoreRepositoryRetryStrategyMinBackoff:3}

file.upload.api.url=/safe-storage/v1/files
file.download.api.url=/safe-storage/v1/files/{fileKey}
file.updateMetadata.api.url=/safe-storage/v1/files/{fileKey}
sqs.staging.area.topic= https://sqs.us-east-1.amazonaws.com/myqueue"

logging.level.it.pagopa.pnss=${PnSsLoggingLevelRoot:debug}
#logging.level.org.springframework.web = DEBUG


#S3.bucket.stage.name = ${PnSsStagingBucketName:PnSsStagingBucketName}
#S3.bucket.stage.arn =${PnSsStagingBucketArn:PnSsStagingBucketArn}
#
#S3.bucket.hot.name = ${PnSsBucketName:dgs-bing-ss-pnssbucket-27myu2kp62x9}
#S3.bucket.hot.arn = ${PnSsBucketArn:PnSsBucketArn}

uri.builder.presigned.url.duration.minutes = ${pst:10}
uri.builder.stay.Hot.Bucket.tyme.days = ${stayHotTime:2}
uri.builder.get.file.with.patch.configuration=${PnSsUriBuilderGetFileWithPatchConfiguration:NONE}

dynamo.retry.strategy.max-attempts=${PnSsDynamoRetryStrategyMaxAttempts:3}
dynamo.retry.strategy.min-backoff=${PnSsDynamoRetryStrategyMinBackoff:3}

pdf-raster.retry.strategy.max-attempts=${PnPdfRasterRetryStrategyMaxAttempts:3}
pdf-raster.retry.strategy.min-backoff=${PnPdfRasterRetryStrategyMinBackoff:3}

aruba.cert_id=${PnSsArubaCertId:AS0}
aruba.enabled.log = ${PnSsArubaEnabledLog:false}
#configurazione per ambiente di sviluppo
aruba.sign.timeout=${PnSsArubaSignTimeout:1}

max.restore.time.cold=${PnSsGlacierMaxRestoreTime:18000}

header.x-api-key=x-api-key
header.x-pagopa-safestorage-cx-id=x-pagopa-safestorage-cx-id
#ATTENZIONE: autorizzazione interna (vedi trasformazione file)
default.internal.x-api-key.value=internal-api.key
#ATTENZIONE: autorizzazione interna (vedi trasformazione file)
default.internal.header.x-pagopa-safestorage-cx-id=internal

header.x-checksum-value=x-checksum-value
header.presignedUrl.checksum-md5=Content-MD5
header.presignedUrl.checksum-sha256=checksum-sha256

header.presignUrl.checksum-md5=Content-MD5
header.presignUrl.checksum-sha256=checksum-sha256

queryParam.presignedUrl.traceId=x-amzn-trace-id

presignedUrl.initial.newDocument.state=BOOKED

jetty.maxConnectionsPerDestination=${maxConnectionsPerDestination:200}

# Several ResponseStatusException found. If this prop is not set the reason of the exception is not shown in the api response body
server.error.include-message=always

object.lock.retention.mode=${PnSsBucketLockRetentionMode:GOVERNANCE}

retention.days.toIgnore=${PnSsPreloadedDocsRetentionDays:7}

s3.retry.strategy.max-attempts=${PnSsS3RetryStrategyMaxAttempts:3}
s3.retry.strategy.min-backoff=${PnSsS3RetryStrategyMinBackoff:3}

#Header related to the correlationID in microservices calls
pn.log.cx-id-header=x-pagopa-pn-cx-id

#Http header related to the S3 headObjectResponse
amz.restore.request.date.header.name=x-amz-restore-request-date

#Safe clients
#lista di clients separati da punto e virgola (es. pn-delivery;pn-delivery-push)
#per disabilitare il check impostare il valore a DISABLED
pn.ss.safe-clients=${PnSsSafeClients}