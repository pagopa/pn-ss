AWSTemplateFormatVersion: 2010-09-09
Description: 'Example microservice deploy'

Parameters:
  ProjectName:
    Type: String
    Description: 'Usually pn can be pnXYZ where XYZ are the feature number, useful to create
      experimental environments without crash official development environment'

  AlarmSNSTopicArn:
    Type: String
    Description: ARN of alarm topic

  # WebApiDnsName:
  #   Type: String
  #   Description: 'The DNS name used for WEB rest API.'
  
  # CorsAllowedDomains:
  #   Type: String
  #   Description: 'Comma separated list of domains allowed to make cross origin request'

  ContainerImageUri:
    Type: String
    Description: 'Exact container image URI with full repository and image digest'

  MicroserviceNumber:
    Type: Number
    Description: 'Disambiguation useful for load balancer rules'

  TemplateBucketBaseUrl:
    Type: String
    Description: 'The S3 bucket from which to fetch the templates used by this stack.'

  ECSClusterName:
    Type: String
    Description: 'The name of the ECS cluster where the microservice is going to be deployed'

  SubnetsIds:
    Type: String
    Description: 'subnets ids comma separated list. Where to deploy the microservice'

  VpcId:
    Type: String
    Description: 'VpcId where the microservice is going to be deployed'
  
  EcsDefaultSecurityGroup:
    Type: String
    Description: 'Default security group required by infrastructure'

  ApplicationLoadBalancerListenerArn:
    Type: String
    Description: 'Load balancer listener where HTTP endpoints is going to be registered'

  ApplicationLoadBalancerDomain:
    Type: String
    Description: 'Base URL of the load balancer where the service is going to be reachable'

  NetworkLoadBalancerLink:
    Type: String
    Description: 'network load balancer link for API-GW'
  
  # LogsKinesisSourceStreamArn:
  #   Type: String
  #   Description: 'Kinesis stream that receive logs'
  
  Version:
    Type: String
    Description: 'keep track of used projects commitIds'

  PnSsTableNameAnagraficaClient:
    Type: String
    Description: 'Nome della tabella SS Anagrafica Client'

  PnSsTableArnAnagraficaClient:
    Type: String
    Description: 'ARN della Tabella DynamoDB relativa alla Macchina a Stati'
  
  PnSsTableNameTipologieDocumenti:
    Type: String
    Description: 'Nome della tabella SS Tipologie Documenti'

  PnSsTableArnTipologieDocumenti:
    Type: String
    Description: 'ARN della tabella SS Tipologie Documenti'
  
  PnSsTableNameDocumenti:
    Type: String
    Description: 'Nome tabella SS Documenti' 

  PnSsTableArnDocumenti:
    Type: String
    Description: 'ARN della tabella SS Documenti'

  PnSsBucketName:
    Type: String
    Description: 'Nome del Bucket SS'

  PnSsBucketArn:
    Type: String
    Description: 'ARN del Bucket SS'
  
  PnSsStagingBucketName:
    Type: String
    Description: 'Nome Bucket SS Staging'

  PnSsStagingBucketArn:
    Type: String
    Description: 'ARN Bucket SS Staging'

  PnSsQueueNameStagingBucket:
    Type: String
    Description: 'Nome coda per notifiche SS Staging Bucket'

  PnSsQueueArnStagingBucket:
    Type: String
    Description: 'ARN coda per notifiche SS Staging Bucket'

  PnSsQueueUrlStagingBucket:
    Type: String
    Description: 'URL coda per notifiche SS Staging Bucket'

  PnSsDLQueueNameStagingBucket:
    Type: String
    Description: 'Nome coda DLQ per notifiche SS Staging Bucket'

  PnSsSNSNameStagingBucket:
    Type: String
    Description: 'Nome SNS Topic per notifiche SS Staging Bucket'
  
  PnSsManagedPolicyName:
    Type: String
    Description: 'Nome della managed policy associata alla state machine'
    Default: 'PnSsManagedPolicyName'
  

Resources:

  # PN-TemplateBeMs microservice
  SafeStorageMicroservice:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub '${TemplateBucketBaseUrl}/fragments/ecs-service.yaml'
      Parameters:
        MicroServiceUniqueName: !Sub '${ProjectName}-safe-storage'
        CpuValue: 2048
        MemoryAmount: 6GB
        AlarmSNSTopicArn: !Ref AlarmSNSTopicArn
        ContainerImageURI: !Sub '${ContainerImageUri}'
        ContainerEnvEntry1: !Sub 'AWS_REGIONCODE=${AWS::Region}'
        ContainerEnvEntry2: !Sub 'StateMachineBaseUrl=${ApplicationLoadBalancerDomain}'
        ContainerEnvEntry3: !Sub 'PnSsBucketName=${PnSsBucketName}'
        ContainerEnvEntry4: !Sub 'PnSsBucketArn=${PnSsBucketArn}'
        ContainerEnvEntry5: !Sub 'PnSsStagingBucketName=${PnSsStagingBucketName}'
        ContainerEnvEntry6: !Sub 'PnSsStagingBucketArn=${PnSsStagingBucketArn}'
        ContainerEnvEntry7: !Sub 'PnSsTableNameAnagraficaClient=${PnSsTableNameAnagraficaClient}'
        ContainerEnvEntry8: !Sub 'PnSsTableNameTipologieDocumenti=${PnSsTableNameTipologieDocumenti}'
        ContainerEnvEntry9: !Sub 'PnSsTableNameDocumenti=${PnSsTableNameDocumenti}'
        ContainerEnvEntry10: !Sub 'PnSsQueueNameStagingBucket=${PnSsQueueNameStagingBucket}'
        MappedPaths: '/safestorage/*,/safe-storage/*'
        ECSClusterName: !Ref ECSClusterName
        Subnets: !Ref SubnetsIds
        VpcId: !Ref VpcId
        EcsDefaultSecurityGroup: !Ref EcsDefaultSecurityGroup
        LoadBalancerListenerArn: !Ref ApplicationLoadBalancerListenerArn
        LoadbalancerRulePriority: !Ref MicroserviceNumber
        # CloudwatchLogKinesisStreamArn: !Ref LogsKinesisSourceStreamArn
        TaskRoleManagedPolicyArn: !Ref PnSsManagedPolicy
        # HealthCheckPath: 
  
  PnSsManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: 'String'
      ManagedPolicyName: !Ref PnSsManagedPolicyName
      PolicyDocument: 
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'dynamodb:*GetItem'
              - 'dynamodb:Query'
              - 'dynamodb:Describe*'
              - 'dynamodb:Scan'
              - 'dynamodb:List*'
              - 'dynamodb:DeleteItem'
              - 'dynamodb:Batch*'
              - 'dynamodb:PartiQL*'
              - 'dynamodb:Update*'
              - 'dynamodb:Put*'
            Resource:
              - !Sub '${PnSsTableArnAnagraficaClient}'
              - !Sub '${PnSsTableArnTipologieDocumenti}'
              - !Sub '${PnSsTableArnDocumenti}'
          - Effect: Allow
            Action:
              - 's3:List*'
              - 's3:GetBucket*'
              - 's3:GetObject*'
              - 's3:*MultipartUpload*'
              - 's3:*LifecycleConfiguration'
              - 's3:*Replication*'
              - 's3:Replicate*'
              - 's3:PutBucket*'
              - 's3:PutObject*'
              - 's3:RestoreObject'
            Resource:
              - !Sub '${PnSsBucketArn}'
              - !Join [ '', [ !Sub '${PnSsBucketArn}' , '/*']]
              - !Sub '${PnSsStagingBucketArn}'
              - !Join [ '', [ !Sub '${PnSsStagingBucketArn}' , '/*']]
          - Effect: Allow
            Action:
              - 'sqs:ReceiveMessage'
              - 'sqs:DeleteMessage'
              - 'sqs:PurgeQueue'
              - 'sqs:Get*'
              - 'sqs:List*'
            Resource:
              - !Sub '${PnSsQueueArnStagingBucket}'

  PnSsQueuePolicyStagingBucket:
    Type: AWS::SQS::QueuePolicy
    Properties: 
      Queues: 
        - !Sub '${PnSsQueueUrlStagingBucket}' 
      PolicyDocument: 
        Statement: 
          - Action: 
              - 'SQS:SendMessage'
              - 'SQS:ReceiveMessage'
              - 'SQS:DeleteMessage'
              - 'SQS:ChangeMessageVisibility'
            Effect: "Allow"
            Resource: !Sub ${PnSsQueueArnStagingBucket}
            Principal:  
              AWS: 
                - !Join [ '', [ !Sub 'arn:aws:iam::${AWS::AccountId}:role/' , !GetAtt SafeStorageMicroservice.Outputs.TaskRoleName]]

  PnSsGestoreBucketRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join [ '', [!Sub 'PnSsGestoreBucketLambdaName', '-role-name']]
      Description: 'Ruolo della Lambda che implementa la funzionalit√† del Gestore Bucket'
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        # - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action:
          - 'sts:AssumeRole'

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['',['/pn-safestorage/', !Ref PnSsGestoreBucket]]
      RetentionInDays: 30
            
  PnSsGestoreBucket:
    Type: AWS::Lambda::Function
    Properties:
      Description: 'Pn SafeStorage Gestore Bucket'
      Handler: index.lambda_handler
      MemorySize: 256
      Runtime: python3.8
      Role: !GetAtt PnSsGestoreBucketRole.Arn
      Timeout: 240
      Environment:
        Variables:
          EnvEntry1: 'TemporaryEnvVar'
      Code:
        ZipFile: |
            import os
            import boto3
            import botocore
            import logging
            logger = logging.getLogger()
            logger.setLevel(logging.INFO)
            #logger.setLevel(logging.DEBUG)
            # Env variables from CFN
            envvar = os.environ.get('EnvEntry1')
            def lambda_handler(event, context):
                print(event)

  PnSsGestoreBucketNotificationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt PnSsGestoreBucket.Arn
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Ref PnSsBucketArn

              