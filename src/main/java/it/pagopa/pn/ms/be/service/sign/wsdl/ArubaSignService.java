
package it.pagopa.pn.ms.be.service.sign.wsdl;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.FaultAction;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;
import java.util.List;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.3.2
 * Generated source version: 2.2
 * 
 */
@WebService(name = "ArubaSignService", targetNamespace = "http://arubasignservice.arubapec.it/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface ArubaSignService {


    /**
     * 
     * @return
     *     returns java.lang.String
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getVersion", targetNamespace = "http://arubasignservice.arubapec.it/", className = "it.pagopa.pn.template.sign.wsdl.GetVersion")
    @ResponseWrapper(localName = "getVersionResponse", targetNamespace = "http://arubasignservice.arubapec.it/", className = "it.pagopa.pn.template.sign.wsdl.GetVersionResponse")
    @Action(input = "http://arubasignservice.arubapec.it/ArubaSignService/getVersionRequest", output = "http://arubasignservice.arubapec.it/ArubaSignService/getVersionResponse")
    public String getVersion();

    /**
     * 
     * @param password
     * @param fieldName
     * @param dictSignedAttributes
     * @param pdfprofile
     * @param signRequestV2
     * @param apparence
     * @return
     *     returns it.pagopa.pn.template.sign.wsdl.SignReturnV2
     * @throws TypeOfTransportNotImplemented_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "pdfsignatureV2", targetNamespace = "http://arubasignservice.arubapec.it/", className = "it.pagopa.pn.template.sign.wsdl.PdfsignatureV2")
    @ResponseWrapper(localName = "pdfsignatureV2Response", targetNamespace = "http://arubasignservice.arubapec.it/", className = "it.pagopa.pn.template.sign.wsdl.PdfsignatureV2Response")
    @Action(input = "http://arubasignservice.arubapec.it/ArubaSignService/pdfsignatureV2Request", output = "http://arubasignservice.arubapec.it/ArubaSignService/pdfsignatureV2Response", fault = {
        @FaultAction(className = TypeOfTransportNotImplemented_Exception.class, value = "http://arubasignservice.arubapec.it/ArubaSignService/pdfsignatureV2/Fault/TypeOfTransportNotImplemented")
    })
    public SignReturnV2 pdfsignatureV2(
            @WebParam(name = "SignRequestV2", targetNamespace = "")
                    SignRequestV2 signRequestV2,
            @WebParam(name = "Apparence", targetNamespace = "")
                    PdfSignApparence apparence,
            @WebParam(name = "fieldName", targetNamespace = "")
                    String fieldName,
            @WebParam(name = "pdfprofile", targetNamespace = "")
                    PdfProfile pdfprofile,
            @WebParam(name = "password", targetNamespace = "")
                    String password,
            @WebParam(name = "dict_signed_attributes", targetNamespace = "")
                    DictionarySignedAttributes dictSignedAttributes)
        throws TypeOfTransportNotImplemented_Exception
    ;

    /**
     *
     * @param signRequestV2
     * @param parameter
     * @return
     *     returns it.pagopa.pn.template.sign.wsdl.SignReturnV2
     * @throws TypeOfTransportNotImplemented_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "xmlsignature", targetNamespace = "http://arubasignservice.arubapec.it/", className = "it.pagopa.pn.template.sign.wsdl.Xmlsignature")
    @ResponseWrapper(localName = "xmlsignatureResponse", targetNamespace = "http://arubasignservice.arubapec.it/", className = "it.pagopa.pn.template.sign.wsdl.XmlsignatureResponse")
    @Action(input = "http://arubasignservice.arubapec.it/ArubaSignService/xmlsignatureRequest", output = "http://arubasignservice.arubapec.it/ArubaSignService/xmlsignatureResponse", fault = {
        @FaultAction(className = TypeOfTransportNotImplemented_Exception.class, value = "http://arubasignservice.arubapec.it/ArubaSignService/xmlsignature/Fault/TypeOfTransportNotImplemented")
    })
    public SignReturnV2 xmlsignature(
            @WebParam(name = "SignRequestV2", targetNamespace = "")
                    SignRequestV2 signRequestV2,
            @WebParam(name = "parameter", targetNamespace = "")
                    XmlSignatureParameter parameter)
        throws TypeOfTransportNotImplemented_Exception
    ;

    /**
     *
     * @param identity
     * @return
     *     returns it.pagopa.pn.template.sign.wsdl.UserCertList
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "listCert", targetNamespace = "http://arubasignservice.arubapec.it/", className = "it.pagopa.pn.template.sign.wsdl.ListCert")
    @ResponseWrapper(localName = "listCertResponse", targetNamespace = "http://arubasignservice.arubapec.it/", className = "it.pagopa.pn.template.sign.wsdl.ListCertResponse")
    @Action(input = "http://arubasignservice.arubapec.it/ArubaSignService/listCertRequest", output = "http://arubasignservice.arubapec.it/ArubaSignService/listCertResponse")
    public UserCertList listCert(
            @WebParam(name = "Identity", targetNamespace = "")
                    Auth identity);

    /**
     *
     * @param signHashRequest
     * @return
     *     returns it.pagopa.pn.template.sign.wsdl.SignHashReturn
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "signhash", targetNamespace = "http://arubasignservice.arubapec.it/", className = "it.pagopa.pn.template.sign.wsdl.Signhash")
    @ResponseWrapper(localName = "signhashResponse", targetNamespace = "http://arubasignservice.arubapec.it/", className = "it.pagopa.pn.template.sign.wsdl.SignhashResponse")
    @Action(input = "http://arubasignservice.arubapec.it/ArubaSignService/signhashRequest", output = "http://arubasignservice.arubapec.it/ArubaSignService/signhashResponse")
    public SignHashReturn signhash(
            @WebParam(name = "SignHashRequest", targetNamespace = "")
                    SignHashRequest signHashRequest);

    /**
     *
     * @param detached
     * @param returnder
     * @param signRequestV2
     * @return
     *     returns it.pagopa.pn.template.sign.wsdl.SignReturnV2
     * @throws TypeOfTransportNotImplemented_Exception
     */
    @WebMethod(operationName = "pkcs7signV2")
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "pkcs7signV2", targetNamespace = "http://arubasignservice.arubapec.it/", className = "it.pagopa.pn.template.sign.wsdl.Pkcs7SignV2")
    @ResponseWrapper(localName = "pkcs7signV2Response", targetNamespace = "http://arubasignservice.arubapec.it/", className = "it.pagopa.pn.template.sign.wsdl.Pkcs7SignV2Response")
    @Action(input = "http://arubasignservice.arubapec.it/ArubaSignService/pkcs7signV2Request", output = "http://arubasignservice.arubapec.it/ArubaSignService/pkcs7signV2Response", fault = {
        @FaultAction(className = TypeOfTransportNotImplemented_Exception.class, value = "http://arubasignservice.arubapec.it/ArubaSignService/pkcs7signV2/Fault/TypeOfTransportNotImplemented")
    })
    public SignReturnV2 pkcs7SignV2(
            @WebParam(name = "SignRequestV2", targetNamespace = "")
                    SignRequestV2 signRequestV2,
            @WebParam(name = "detached", targetNamespace = "")
                    boolean detached,
            @WebParam(name = "returnder", targetNamespace = "")
                    boolean returnder)
        throws TypeOfTransportNotImplemented_Exception
    ;

    /**
     *
     * @param detached
     * @param signRequestV2
     * @return
     *     returns it.pagopa.pn.template.sign.wsdl.SignReturnV2
     * @throws TypeOfTransportNotImplemented_Exception
     */
    @WebMethod(operationName = "addpkcs7sign")
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "addpkcs7sign", targetNamespace = "http://arubasignservice.arubapec.it/", className = "it.pagopa.pn.template.sign.wsdl.Addpkcs7Sign")
    @ResponseWrapper(localName = "addpkcs7signResponse", targetNamespace = "http://arubasignservice.arubapec.it/", className = "it.pagopa.pn.template.sign.wsdl.Addpkcs7SignResponse")
    @Action(input = "http://arubasignservice.arubapec.it/ArubaSignService/addpkcs7signRequest", output = "http://arubasignservice.arubapec.it/ArubaSignService/addpkcs7signResponse", fault = {
        @FaultAction(className = TypeOfTransportNotImplemented_Exception.class, value = "http://arubasignservice.arubapec.it/ArubaSignService/addpkcs7sign/Fault/TypeOfTransportNotImplemented")
    })
    public SignReturnV2 addpkcs7Sign(
            @WebParam(name = "SignRequestV2", targetNamespace = "")
                    SignRequestV2 signRequestV2,
            @WebParam(name = "detached", targetNamespace = "")
                    boolean detached)
        throws TypeOfTransportNotImplemented_Exception
    ;

    /**
     *
     * @param signRequestV2
     * @param excludeSigningTime
     * @param countersignature
     * @return
     *     returns it.pagopa.pn.template.sign.wsdl.SignReturnV2
     * @throws TypeOfTransportNotImplemented_Exception
     */
    @WebMethod(operationName = "pkcs7signhash")
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "pkcs7signhash", targetNamespace = "http://arubasignservice.arubapec.it/", className = "it.pagopa.pn.template.sign.wsdl.Pkcs7Signhash")
    @ResponseWrapper(localName = "pkcs7signhashResponse", targetNamespace = "http://arubasignservice.arubapec.it/", className = "it.pagopa.pn.template.sign.wsdl.Pkcs7SignhashResponse")
    @Action(input = "http://arubasignservice.arubapec.it/ArubaSignService/pkcs7signhashRequest", output = "http://arubasignservice.arubapec.it/ArubaSignService/pkcs7signhashResponse", fault = {
        @FaultAction(className = TypeOfTransportNotImplemented_Exception.class, value = "http://arubasignservice.arubapec.it/ArubaSignService/pkcs7signhash/Fault/TypeOfTransportNotImplemented")
    })
    public SignReturnV2 pkcs7Signhash(
            @WebParam(name = "SignRequestV2", targetNamespace = "")
                    SignRequestV2 signRequestV2,
            @WebParam(name = "countersignature", targetNamespace = "")
                    boolean countersignature,
            @WebParam(name = "excludeSigningTime", targetNamespace = "")
                    boolean excludeSigningTime)
        throws TypeOfTransportNotImplemented_Exception
    ;

    /**
     *
     * @param markRequest
     * @return
     *     returns it.pagopa.pn.template.sign.wsdl.MarkReturn
     * @throws TypeOfTransportNotImplemented_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "tsd", targetNamespace = "http://arubasignservice.arubapec.it/", className = "it.pagopa.pn.template.sign.wsdl.Tsd")
    @ResponseWrapper(localName = "tsdResponse", targetNamespace = "http://arubasignservice.arubapec.it/", className = "it.pagopa.pn.template.sign.wsdl.TsdResponse")
    @Action(input = "http://arubasignservice.arubapec.it/ArubaSignService/tsdRequest", output = "http://arubasignservice.arubapec.it/ArubaSignService/tsdResponse", fault = {
        @FaultAction(className = TypeOfTransportNotImplemented_Exception.class, value = "http://arubasignservice.arubapec.it/ArubaSignService/tsd/Fault/TypeOfTransportNotImplemented")
    })
    public MarkReturn tsd(
            @WebParam(name = "MarkRequest", targetNamespace = "")
                    MarkRequest markRequest)
        throws TypeOfTransportNotImplemented_Exception
    ;

    /**
     *
     * @param markRequest
     * @return
     *     returns it.pagopa.pn.template.sign.wsdl.MarkReturn
     * @throws TypeOfTransportNotImplemented_Exception
     */
    @WebMethod(operationName = "m7m")
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "m7m", targetNamespace = "http://arubasignservice.arubapec.it/", className = "it.pagopa.pn.template.sign.wsdl.M7M")
    @ResponseWrapper(localName = "m7mResponse", targetNamespace = "http://arubasignservice.arubapec.it/", className = "it.pagopa.pn.template.sign.wsdl.M7MResponse")
    @Action(input = "http://arubasignservice.arubapec.it/ArubaSignService/m7mRequest", output = "http://arubasignservice.arubapec.it/ArubaSignService/m7mResponse", fault = {
        @FaultAction(className = TypeOfTransportNotImplemented_Exception.class, value = "http://arubasignservice.arubapec.it/ArubaSignService/m7m/Fault/TypeOfTransportNotImplemented")
    })
    public MarkReturn m7M(
            @WebParam(name = "MarkRequest", targetNamespace = "")
                    MarkRequest markRequest)
        throws TypeOfTransportNotImplemented_Exception
    ;

    /**
     *
     * @param signRequest
     * @return
     *     returns it.pagopa.pn.template.sign.wsdl.SignReturn
     * @throws TypeOfTransportNotImplemented_Exception
     */
    @WebMethod(operationName = "pkcs7sign")
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "pkcs7sign", targetNamespace = "http://arubasignservice.arubapec.it/", className = "it.pagopa.pn.template.sign.wsdl.Pkcs7Sign")
    @ResponseWrapper(localName = "pkcs7signResponse", targetNamespace = "http://arubasignservice.arubapec.it/", className = "it.pagopa.pn.template.sign.wsdl.Pkcs7SignResponse")
    @Action(input = "http://arubasignservice.arubapec.it/ArubaSignService/pkcs7signRequest", output = "http://arubasignservice.arubapec.it/ArubaSignService/pkcs7signResponse", fault = {
        @FaultAction(className = TypeOfTransportNotImplemented_Exception.class, value = "http://arubasignservice.arubapec.it/ArubaSignService/pkcs7sign/Fault/TypeOfTransportNotImplemented")
    })
    public SignReturn pkcs7Sign(
            @WebParam(name = "SignRequest", targetNamespace = "")
                    SignRequest signRequest)
        throws TypeOfTransportNotImplemented_Exception
    ;

    /**
     *
     * @param apparence
     * @param signRequest
     * @return
     *     returns it.pagopa.pn.template.sign.wsdl.SignReturn
     * @throws TypeOfTransportNotImplemented_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "pdfsignature", targetNamespace = "http://arubasignservice.arubapec.it/", className = "it.pagopa.pn.template.sign.wsdl.Pdfsignature")
    @ResponseWrapper(localName = "pdfsignatureResponse", targetNamespace = "http://arubasignservice.arubapec.it/", className = "it.pagopa.pn.template.sign.wsdl.PdfsignatureResponse")
    @Action(input = "http://arubasignservice.arubapec.it/ArubaSignService/pdfsignatureRequest", output = "http://arubasignservice.arubapec.it/ArubaSignService/pdfsignatureResponse", fault = {
        @FaultAction(className = TypeOfTransportNotImplemented_Exception.class, value = "http://arubasignservice.arubapec.it/ArubaSignService/pdfsignature/Fault/TypeOfTransportNotImplemented")
    })
    public SignReturn pdfsignature(
            @WebParam(name = "SignRequest", targetNamespace = "")
                    SignRequest signRequest,
            @WebParam(name = "Apparence", targetNamespace = "")
                    PdfSignApparence apparence)
        throws TypeOfTransportNotImplemented_Exception
    ;

    /**
     *
     * @param identity
     * @return
     *     returns java.util.List<java.lang.String>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "listprocess", targetNamespace = "http://arubasignservice.arubapec.it/", className = "it.pagopa.pn.template.sign.wsdl.Listprocess")
    @ResponseWrapper(localName = "listprocessResponse", targetNamespace = "http://arubasignservice.arubapec.it/", className = "it.pagopa.pn.template.sign.wsdl.ListprocessResponse")
    @Action(input = "http://arubasignservice.arubapec.it/ArubaSignService/listprocessRequest", output = "http://arubasignservice.arubapec.it/ArubaSignService/listprocessResponse")
    public List<String> listprocess(
            @WebParam(name = "Identity", targetNamespace = "")
                    Auth identity);

    /**
     *
     * @param identity
     * @return
     *     returns java.lang.String
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "opensession", targetNamespace = "http://arubasignservice.arubapec.it/", className = "it.pagopa.pn.template.sign.wsdl.Opensession")
    @ResponseWrapper(localName = "opensessionResponse", targetNamespace = "http://arubasignservice.arubapec.it/", className = "it.pagopa.pn.template.sign.wsdl.OpensessionResponse")
    @Action(input = "http://arubasignservice.arubapec.it/ArubaSignService/opensessionRequest", output = "http://arubasignservice.arubapec.it/ArubaSignService/opensessionResponse")
    public String opensession(
            @WebParam(name = "Identity", targetNamespace = "")
                    Auth identity);

    /**
     *
     * @param identity
     * @param sessionid
     * @return
     *     returns java.lang.String
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "closesession", targetNamespace = "http://arubasignservice.arubapec.it/", className = "it.pagopa.pn.template.sign.wsdl.Closesession")
    @ResponseWrapper(localName = "closesessionResponse", targetNamespace = "http://arubasignservice.arubapec.it/", className = "it.pagopa.pn.template.sign.wsdl.ClosesessionResponse")
    @Action(input = "http://arubasignservice.arubapec.it/ArubaSignService/closesessionRequest", output = "http://arubasignservice.arubapec.it/ArubaSignService/closesessionResponse")
    public String closesession(
            @WebParam(name = "Identity", targetNamespace = "")
                    Auth identity,
            @WebParam(name = "sessionid", targetNamespace = "")
                    String sessionid);

    /**
     *
     * @param identity
     * @param domain
     * @param username
     * @return
     *     returns it.pagopa.pn.template.sign.wsdl.UserCertListAuth
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "listCertAuth", targetNamespace = "http://arubasignservice.arubapec.it/", className = "it.pagopa.pn.template.sign.wsdl.ListCertAuth")
    @ResponseWrapper(localName = "listCertAuthResponse", targetNamespace = "http://arubasignservice.arubapec.it/", className = "it.pagopa.pn.template.sign.wsdl.ListCertAuthResponse")
    @Action(input = "http://arubasignservice.arubapec.it/ArubaSignService/listCertAuthRequest", output = "http://arubasignservice.arubapec.it/ArubaSignService/listCertAuthResponse")
    public UserCertListAuth listCertAuth(
            @WebParam(name = "Identity", targetNamespace = "")
                    ApplicationAuth identity,
            @WebParam(name = "domain", targetNamespace = "")
                    String domain,
            @WebParam(name = "username", targetNamespace = "")
                    String username);

    /**
     *
     * @param identity
     * @return
     *     returns it.pagopa.pn.template.sign.wsdl.ArssReturn
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "verifyOtp", targetNamespace = "http://arubasignservice.arubapec.it/", className = "it.pagopa.pn.template.sign.wsdl.VerifyOtp")
    @ResponseWrapper(localName = "verifyOtpResponse", targetNamespace = "http://arubasignservice.arubapec.it/", className = "it.pagopa.pn.template.sign.wsdl.VerifyOtpResponse")
    @Action(input = "http://arubasignservice.arubapec.it/ArubaSignService/verifyOtpRequest", output = "http://arubasignservice.arubapec.it/ArubaSignService/verifyOtpResponse")
    public ArssReturn verifyOtp(
            @WebParam(name = "Identity", targetNamespace = "")
                    Auth identity);

    /**
     *
     * @param identity
     * @param type
     * @return
     *     returns it.pagopa.pn.template.sign.wsdl.ArssReturn
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "sendCredential", targetNamespace = "http://arubasignservice.arubapec.it/", className = "it.pagopa.pn.template.sign.wsdl.SendCredential")
    @ResponseWrapper(localName = "sendCredentialResponse", targetNamespace = "http://arubasignservice.arubapec.it/", className = "it.pagopa.pn.template.sign.wsdl.SendCredentialResponse")
    @Action(input = "http://arubasignservice.arubapec.it/ArubaSignService/sendCredentialRequest", output = "http://arubasignservice.arubapec.it/ArubaSignService/sendCredentialResponse")
    public ArssReturn sendCredential(
            @WebParam(name = "Identity", targetNamespace = "")
                    Auth identity,
            @WebParam(name = "type", targetNamespace = "")
                    CredentialsType type);

    /**
     *
     * @param identity
     * @param type
     * @return
     *     returns it.pagopa.pn.template.sign.wsdl.RetriveCredentialReturn
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "retriveCredential", targetNamespace = "http://arubasignservice.arubapec.it/", className = "it.pagopa.pn.template.sign.wsdl.RetriveCredential")
    @ResponseWrapper(localName = "retriveCredentialResponse", targetNamespace = "http://arubasignservice.arubapec.it/", className = "it.pagopa.pn.template.sign.wsdl.RetriveCredentialResponse")
    @Action(input = "http://arubasignservice.arubapec.it/ArubaSignService/retriveCredentialRequest", output = "http://arubasignservice.arubapec.it/ArubaSignService/retriveCredentialResponse")
    public RetriveCredentialReturn retriveCredential(
            @WebParam(name = "identity", targetNamespace = "")
                    Auth identity,
            @WebParam(name = "type", targetNamespace = "")
                    CredentialsType type);

    /**
     *
     * @param identity
     * @return
     *     returns it.pagopa.pn.template.sign.wsdl.EncryptedEnvelopReturn
     * @throws TypeOfTransportNotImplemented_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "encryptedEnvelope", targetNamespace = "http://arubasignservice.arubapec.it/", className = "it.pagopa.pn.template.sign.wsdl.EncryptedEnvelope")
    @ResponseWrapper(localName = "encryptedEnvelopeResponse", targetNamespace = "http://arubasignservice.arubapec.it/", className = "it.pagopa.pn.template.sign.wsdl.EncryptedEnvelopeResponse")
    @Action(input = "http://arubasignservice.arubapec.it/ArubaSignService/encryptedEnvelopeRequest", output = "http://arubasignservice.arubapec.it/ArubaSignService/encryptedEnvelopeResponse", fault = {
        @FaultAction(className = TypeOfTransportNotImplemented_Exception.class, value = "http://arubasignservice.arubapec.it/ArubaSignService/encryptedEnvelope/Fault/TypeOfTransportNotImplemented")
    })
    public EncryptedEnvelopReturn encryptedEnvelope(
            @WebParam(name = "identity", targetNamespace = "")
                    EncryptedEnvelopReq identity)
        throws TypeOfTransportNotImplemented_Exception
    ;

    /**
     *
     * @param testCredential
     * @return
     *     returns it.pagopa.pn.template.sign.wsdl.GwReturn
     */
    @WebMethod(operationName = "test_otp")
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "test_otp", targetNamespace = "http://arubasignservice.arubapec.it/", className = "it.pagopa.pn.template.sign.wsdl.TestOtp")
    @ResponseWrapper(localName = "test_otpResponse", targetNamespace = "http://arubasignservice.arubapec.it/", className = "it.pagopa.pn.template.sign.wsdl.TestOtpResponse")
    @Action(input = "http://arubasignservice.arubapec.it/ArubaSignService/test_otpRequest", output = "http://arubasignservice.arubapec.it/ArubaSignService/test_otpResponse")
    public GwReturn testOtp(
            @WebParam(name = "test_credential", targetNamespace = "")
                    TestCredential testCredential);

    /**
     *
     * @param credentialQuery
     * @return
     *     returns it.pagopa.pn.template.sign.wsdl.CredentialListReturn
     */
    @WebMethod(operationName = "credentials_query")
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "credentials_query", targetNamespace = "http://arubasignservice.arubapec.it/", className = "it.pagopa.pn.template.sign.wsdl.CredentialsQuery")
    @ResponseWrapper(localName = "credentials_queryResponse", targetNamespace = "http://arubasignservice.arubapec.it/", className = "it.pagopa.pn.template.sign.wsdl.CredentialsQueryResponse")
    @Action(input = "http://arubasignservice.arubapec.it/ArubaSignService/credentials_queryRequest", output = "http://arubasignservice.arubapec.it/ArubaSignService/credentials_queryResponse")
    public CredentialListReturn credentialsQuery(
            @WebParam(name = "credential_query", targetNamespace = "")
                    CredentialListQuery credentialQuery);

    /**
     *
     * @param identity
     * @param newPassword
     * @return
     *     returns it.pagopa.pn.template.sign.wsdl.GwReturn
     */
    @WebMethod(operationName = "change_password")
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "change_password", targetNamespace = "http://arubasignservice.arubapec.it/", className = "it.pagopa.pn.template.sign.wsdl.ChangePassword")
    @ResponseWrapper(localName = "change_passwordResponse", targetNamespace = "http://arubasignservice.arubapec.it/", className = "it.pagopa.pn.template.sign.wsdl.ChangePasswordResponse")
    @Action(input = "http://arubasignservice.arubapec.it/ArubaSignService/change_passwordRequest", output = "http://arubasignservice.arubapec.it/ArubaSignService/change_passwordResponse")
    public GwReturn changePassword(
            @WebParam(name = "identity", targetNamespace = "")
                    Auth identity,
            @WebParam(name = "newPassword", targetNamespace = "")
                    String newPassword);

    /**
     *
     * @param identity
     * @param domain
     * @param type
     * @param username
     * @return
     *     returns it.pagopa.pn.template.sign.wsdl.ArssReturn
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "sendCredentialAuth", targetNamespace = "http://arubasignservice.arubapec.it/", className = "it.pagopa.pn.template.sign.wsdl.SendCredentialAuth")
    @ResponseWrapper(localName = "sendCredentialAuthResponse", targetNamespace = "http://arubasignservice.arubapec.it/", className = "it.pagopa.pn.template.sign.wsdl.SendCredentialAuthResponse")
    @Action(input = "http://arubasignservice.arubapec.it/ArubaSignService/sendCredentialAuthRequest", output = "http://arubasignservice.arubapec.it/ArubaSignService/sendCredentialAuthResponse")
    public ArssReturn sendCredentialAuth(
            @WebParam(name = "identity", targetNamespace = "")
                    ApplicationAuth identity,
            @WebParam(name = "type", targetNamespace = "")
                    CredentialsType type,
            @WebParam(name = "domain", targetNamespace = "")
                    String domain,
            @WebParam(name = "username", targetNamespace = "")
                    String username);

    /**
     *
     * @param detached
     * @param identity
     * @param signRequestV2
     * @return
     *     returns it.pagopa.pn.template.sign.wsdl.SignReturnV2Multiple
     * @throws TypeOfTransportNotImplemented_Exception
     */
    @WebMethod(operationName = "pkcs7signV2_multiple")
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "pkcs7signV2_multiple", targetNamespace = "http://arubasignservice.arubapec.it/", className = "it.pagopa.pn.template.sign.wsdl.Pkcs7SignV2Multiple")
    @ResponseWrapper(localName = "pkcs7signV2_multipleResponse", targetNamespace = "http://arubasignservice.arubapec.it/", className = "it.pagopa.pn.template.sign.wsdl.Pkcs7SignV2MultipleResponse")
    @Action(input = "http://arubasignservice.arubapec.it/ArubaSignService/pkcs7signV2_multipleRequest", output = "http://arubasignservice.arubapec.it/ArubaSignService/pkcs7signV2_multipleResponse", fault = {
        @FaultAction(className = TypeOfTransportNotImplemented_Exception.class, value = "http://arubasignservice.arubapec.it/ArubaSignService/pkcs7signV2_multiple/Fault/TypeOfTransportNotImplemented")
    })
    public SignReturnV2Multiple pkcs7SignV2Multiple(
            @WebParam(name = "identity", targetNamespace = "")
                    Auth identity,
            @WebParam(name = "SignRequestV2", targetNamespace = "")
                    List <SignRequestV2> signRequestV2,
            @WebParam(name = "detached", targetNamespace = "")
                    boolean detached)
        throws TypeOfTransportNotImplemented_Exception
    ;

    /**
     *
     * @param identity
     * @param signRequestV2
     * @param countersignature
     * @return
     *     returns it.pagopa.pn.template.sign.wsdl.SignReturnV2Multiple
     * @throws TypeOfTransportNotImplemented_Exception
     */
    @WebMethod(operationName = "pkcs7signhash_multiple")
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "pkcs7signhash_multiple", targetNamespace = "http://arubasignservice.arubapec.it/", className = "it.pagopa.pn.template.sign.wsdl.Pkcs7SignhashMultiple")
    @ResponseWrapper(localName = "pkcs7signhash_multipleResponse", targetNamespace = "http://arubasignservice.arubapec.it/", className = "it.pagopa.pn.template.sign.wsdl.Pkcs7SignhashMultipleResponse")
    @Action(input = "http://arubasignservice.arubapec.it/ArubaSignService/pkcs7signhash_multipleRequest", output = "http://arubasignservice.arubapec.it/ArubaSignService/pkcs7signhash_multipleResponse", fault = {
        @FaultAction(className = TypeOfTransportNotImplemented_Exception.class, value = "http://arubasignservice.arubapec.it/ArubaSignService/pkcs7signhash_multiple/Fault/TypeOfTransportNotImplemented")
    })
    public SignReturnV2Multiple pkcs7SignhashMultiple(
            @WebParam(name = "identity", targetNamespace = "")
                    Auth identity,
            @WebParam(name = "SignRequestV2", targetNamespace = "")
                    List <SignRequestV2> signRequestV2,
            @WebParam(name = "countersignature", targetNamespace = "")
                    boolean countersignature)
        throws TypeOfTransportNotImplemented_Exception
    ;

    /**
     *
     * @param fieldName
     * @param dictSignedAttributes
     * @param pdfprofile
     * @param identity
     * @param signRequestV2
     * @param apparence
     * @return
     *     returns it.pagopa.pn.template.sign.wsdl.SignReturnV2Multiple
     * @throws TypeOfTransportNotImplemented_Exception
     */
    @WebMethod(operationName = "pdfsignatureV2_multiple")
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "pdfsignatureV2_multiple", targetNamespace = "http://arubasignservice.arubapec.it/", className = "it.pagopa.pn.template.sign.wsdl.PdfsignatureV2Multiple")
    @ResponseWrapper(localName = "pdfsignatureV2_multipleResponse", targetNamespace = "http://arubasignservice.arubapec.it/", className = "it.pagopa.pn.template.sign.wsdl.PdfsignatureV2MultipleResponse")
    @Action(input = "http://arubasignservice.arubapec.it/ArubaSignService/pdfsignatureV2_multipleRequest", output = "http://arubasignservice.arubapec.it/ArubaSignService/pdfsignatureV2_multipleResponse", fault = {
        @FaultAction(className = TypeOfTransportNotImplemented_Exception.class, value = "http://arubasignservice.arubapec.it/ArubaSignService/pdfsignatureV2_multiple/Fault/TypeOfTransportNotImplemented")
    })
    public SignReturnV2Multiple pdfsignatureV2Multiple(
            @WebParam(name = "identity", targetNamespace = "")
                    Auth identity,
            @WebParam(name = "SignRequestV2", targetNamespace = "")
                    List <SignRequestV2> signRequestV2,
            @WebParam(name = "Apparence", targetNamespace = "")
                    PdfSignApparence apparence,
            @WebParam(name = "fieldName", targetNamespace = "")
                    String fieldName,
            @WebParam(name = "pdfprofile", targetNamespace = "")
                    PdfProfile pdfprofile,
            @WebParam(name = "dict_signed_attributes", targetNamespace = "")
                    DictionarySignedAttributes dictSignedAttributes)
        throws TypeOfTransportNotImplemented_Exception
    ;

    /**
     *
     * @param identity
     * @param signRequestV2
     * @param parameter
     * @return
     *     returns it.pagopa.pn.template.sign.wsdl.SignReturnV2Multiple
     * @throws TypeOfTransportNotImplemented_Exception
     */
    @WebMethod(operationName = "xmlsignature_multiple")
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "xmlsignature_multiple", targetNamespace = "http://arubasignservice.arubapec.it/", className = "it.pagopa.pn.template.sign.wsdl.XmlsignatureMultiple")
    @ResponseWrapper(localName = "xmlsignature_multipleResponse", targetNamespace = "http://arubasignservice.arubapec.it/", className = "it.pagopa.pn.template.sign.wsdl.XmlsignatureMultipleResponse")
    @Action(input = "http://arubasignservice.arubapec.it/ArubaSignService/xmlsignature_multipleRequest", output = "http://arubasignservice.arubapec.it/ArubaSignService/xmlsignature_multipleResponse", fault = {
        @FaultAction(className = TypeOfTransportNotImplemented_Exception.class, value = "http://arubasignservice.arubapec.it/ArubaSignService/xmlsignature_multiple/Fault/TypeOfTransportNotImplemented")
    })
    public SignReturnV2Multiple xmlsignatureMultiple(
            @WebParam(name = "identity", targetNamespace = "")
                    Auth identity,
            @WebParam(name = "SignRequestV2", targetNamespace = "")
                    List <SignRequestV2> signRequestV2,
            @WebParam(name = "parameter", targetNamespace = "")
                    XmlSignatureParameter parameter)
        throws TypeOfTransportNotImplemented_Exception
    ;

    /**
     *
     * @param identity
     * @return
     *     returns it.pagopa.pn.template.sign.wsdl.AuthMethodsReturn
     */
    @WebMethod(operationName = "auth_methods")
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "auth_methods", targetNamespace = "http://arubasignservice.arubapec.it/", className = "it.pagopa.pn.template.sign.wsdl.AuthMethods")
    @ResponseWrapper(localName = "auth_methodsResponse", targetNamespace = "http://arubasignservice.arubapec.it/", className = "it.pagopa.pn.template.sign.wsdl.AuthMethodsResponse")
    @Action(input = "http://arubasignservice.arubapec.it/ArubaSignService/auth_methodsRequest", output = "http://arubasignservice.arubapec.it/ArubaSignService/auth_methodsResponse")
    public AuthMethodsReturn authMethods(
            @WebParam(name = "identity", targetNamespace = "")
                    Auth identity);

    /**
     *
     * @param markRequest
     * @param password
     * @return
     *     returns it.pagopa.pn.template.sign.wsdl.MarkReturn
     * @throws TypeOfTransportNotImplemented_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "pdfsignatureDTS", targetNamespace = "http://arubasignservice.arubapec.it/", className = "it.pagopa.pn.template.sign.wsdl.PdfsignatureDTS")
    @ResponseWrapper(localName = "pdfsignatureDTSResponse", targetNamespace = "http://arubasignservice.arubapec.it/", className = "it.pagopa.pn.template.sign.wsdl.PdfsignatureDTSResponse")
    @Action(input = "http://arubasignservice.arubapec.it/ArubaSignService/pdfsignatureDTSRequest", output = "http://arubasignservice.arubapec.it/ArubaSignService/pdfsignatureDTSResponse", fault = {
        @FaultAction(className = TypeOfTransportNotImplemented_Exception.class, value = "http://arubasignservice.arubapec.it/ArubaSignService/pdfsignatureDTS/Fault/TypeOfTransportNotImplemented")
    })
    public MarkReturn pdfsignatureDTS(
            @WebParam(name = "MarkRequest", targetNamespace = "")
                    MarkRequest markRequest,
            @WebParam(name = "password", targetNamespace = "")
                    String password)
        throws TypeOfTransportNotImplemented_Exception
    ;

    /**
     *
     * @param updateSignatureRequest
     * @return
     *     returns it.pagopa.pn.template.sign.wsdl.SignReturnV2
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "updateSignature", targetNamespace = "http://arubasignservice.arubapec.it/", className = "it.pagopa.pn.template.sign.wsdl.UpdateSignature")
    @ResponseWrapper(localName = "updateSignatureResponse", targetNamespace = "http://arubasignservice.arubapec.it/", className = "it.pagopa.pn.template.sign.wsdl.UpdateSignatureResponse")
    @Action(input = "http://arubasignservice.arubapec.it/ArubaSignService/updateSignatureRequest", output = "http://arubasignservice.arubapec.it/ArubaSignService/updateSignatureResponse")
    public SignReturnV2 updateSignature(
            @WebParam(name = "UpdateSignatureRequest", targetNamespace = "")
                    UpdateSignatureRequest updateSignatureRequest);

    /**
     *
     * @param signRequestV2
     * @param parameter
     * @return
     *     returns it.pagopa.pn.template.sign.wsdl.SignReturnV2
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "jwsSignature", targetNamespace = "http://arubasignservice.arubapec.it/", className = "it.pagopa.pn.template.sign.wsdl.JwsSignature")
    @ResponseWrapper(localName = "jwsSignatureResponse", targetNamespace = "http://arubasignservice.arubapec.it/", className = "it.pagopa.pn.template.sign.wsdl.JwsSignatureResponse")
    @Action(input = "http://arubasignservice.arubapec.it/ArubaSignService/jwsSignatureRequest", output = "http://arubasignservice.arubapec.it/ArubaSignService/jwsSignatureResponse")
    public SignReturnV2 jwsSignature(
            @WebParam(name = "SignRequestV2", targetNamespace = "")
                    SignRequestV2 signRequestV2,
            @WebParam(name = "parameter", targetNamespace = "")
                    JwsSignatureParameter parameter);

    /**
     *
     * @param identity
     * @param signRequestV2
     * @param parameter
     * @return
     *     returns it.pagopa.pn.template.sign.wsdl.SignReturnV2Multiple
     */
    @WebMethod(operationName = "jwsSignature_multiple")
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "jwsSignature_multiple", targetNamespace = "http://arubasignservice.arubapec.it/", className = "it.pagopa.pn.template.sign.wsdl.JwsSignatureMultiple")
    @ResponseWrapper(localName = "jwsSignature_multipleResponse", targetNamespace = "http://arubasignservice.arubapec.it/", className = "it.pagopa.pn.template.sign.wsdl.JwsSignatureMultipleResponse")
    @Action(input = "http://arubasignservice.arubapec.it/ArubaSignService/jwsSignature_multipleRequest", output = "http://arubasignservice.arubapec.it/ArubaSignService/jwsSignature_multipleResponse")
    public SignReturnV2Multiple jwsSignatureMultiple(
            @WebParam(name = "identity", targetNamespace = "")
                    Auth identity,
            @WebParam(name = "SignRequestV2", targetNamespace = "")
                    List <SignRequestV2> signRequestV2,
            @WebParam(name = "parameter", targetNamespace = "")
                    JwsSignatureParameter parameter);

    /**
     *
     * @param markRequest
     * @return
     *     returns it.pagopa.pn.template.sign.wsdl.MarkReturn
     * @throws TypeOfTransportNotImplemented_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "tsr", targetNamespace = "http://arubasignservice.arubapec.it/", className = "it.pagopa.pn.template.sign.wsdl.Tsr")
    @ResponseWrapper(localName = "tsrResponse", targetNamespace = "http://arubasignservice.arubapec.it/", className = "it.pagopa.pn.template.sign.wsdl.TsrResponse")
    @Action(input = "http://arubasignservice.arubapec.it/ArubaSignService/tsrRequest", output = "http://arubasignservice.arubapec.it/ArubaSignService/tsrResponse", fault = {
        @FaultAction(className = TypeOfTransportNotImplemented_Exception.class, value = "http://arubasignservice.arubapec.it/ArubaSignService/tsr/Fault/TypeOfTransportNotImplemented")
    })
    public MarkReturn tsr(
            @WebParam(name = "MarkRequest", targetNamespace = "")
                    MarkRequest markRequest)
        throws TypeOfTransportNotImplemented_Exception
    ;

    /**
     *
     * @return
     *     returns java.lang.String
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "ping", targetNamespace = "http://arubasignservice.arubapec.it/", className = "it.pagopa.pn.template.sign.wsdl.Ping")
    @ResponseWrapper(localName = "pingResponse", targetNamespace = "http://arubasignservice.arubapec.it/", className = "it.pagopa.pn.template.sign.wsdl.PingResponse")
    @Action(input = "http://arubasignservice.arubapec.it/ArubaSignService/pingRequest", output = "http://arubasignservice.arubapec.it/ArubaSignService/pingResponse")
    public String ping();

    /**
     *
     * @param request
     * @return
     *     returns it.pagopa.pn.template.sign.wsdl.VerifyReturn
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "verify", targetNamespace = "http://arubasignservice.arubapec.it/", className = "it.pagopa.pn.template.sign.wsdl.Verify")
    @ResponseWrapper(localName = "verifyResponse", targetNamespace = "http://arubasignservice.arubapec.it/", className = "it.pagopa.pn.template.sign.wsdl.VerifyResponse")
    @Action(input = "http://arubasignservice.arubapec.it/ArubaSignService/verifyRequest", output = "http://arubasignservice.arubapec.it/ArubaSignService/verifyResponse")
    public VerifyReturn verify(
            @WebParam(name = "request", targetNamespace = "")
                    VerifyRequest request);

}
