AWSTemplateFormatVersion: '2010-09-09'
Description: Some storage with input and output

Parameters:
  ProjectName:
    Type: String
    Description: Nome dell'ambiente destinazione

  # Unused but required by CD pipeline
  MicroserviceNumber:
    Type: Number
    Description: An unique number that identify the microservice inside the ECS cluster.

  # Unused but required by CD pipeline
  TemplateBucketBaseUrl:
    Type: String
    Description: URL da cui caricare i frammenti di template di infrastruttura

  Version:
    Type: String
    Description: 'keep track of used projects commitIds'
  
  # CdcKinesisSourceStreamArn:
  #   Type: String
  #   Description: 'Where to send CDC'

  PnSsGestoreBucketLambdaNameIn:
    Type: String
    Description: 'Nome della Lambda function che implementa la funzionalit√† del Gestore Bucket'
    Default: 'pn-safe-storage-gestore-bucket-lambda'

  DeployEnv:
    Type: String
    Description: Nome dell'ambiente destinazione
    Default: DEV
  
  PnSsEventBusExternalNotificationName:
    Type: String 
    Description: 'Nome del Event Bus che raccoglie gli eventi del microservizio Gestore Disponibilita'
    Default: 'Pn-Ss-Notifications-Bus'

Conditions:
  IsProdEnv: !Equals ['PROD', !Ref DeployEnv]

Resources:
  # NullResource:
  #     Type: AWS::CloudFormation::WaitConditionHandle

  PnSsTableAnagraficaClient:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: 'name'
          AttributeType: 'S'
      KeySchema: 
        - AttributeName: 'name'
          KeyType: 'HASH'
      #KinesisStreamSpecification:
      #  StreamArn: 'String'
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      SSESpecification:
        SSEEnabled: true
        SSEType: 'KMS'
      TableClass: 'STANDARD'
    DeletionPolicy: Retain

  PnSsTableTipologieDocumenti:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: 'tipoDocumento'
          AttributeType: 'S'
      KeySchema: 
        - AttributeName: 'tipoDocumento'
          KeyType: 'HASH'
      #KinesisStreamSpecification:
      #  StreamArn: 'String'
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      SSESpecification:
        SSEEnabled: true
        SSEType: 'KMS'
      TableClass: 'STANDARD'
    DeletionPolicy: Retain

  PnSsTableDocumenti:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: 'documentKey'
          AttributeType: 'S'
      KeySchema: 
        - AttributeName: 'documentKey'
          KeyType: 'HASH'
      StreamSpecification:
          StreamViewType: 'NEW_AND_OLD_IMAGES'
      #KinesisStreamSpecification:
      #  StreamArn: 'String'
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      SSESpecification:
        SSEEnabled: true
        SSEType: 'KMS'
      TableClass: 'STANDARD'
    DeletionPolicy: Retain

  PnSsBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: 'Private'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: true
            ServerSideEncryptionByDefault:
              SSEAlgorithm: 'aws:kms'
              #  KMSMasterKeyID: KMS-KEY-AR
      # IntelligentTieringConfigurations:
      #   IntelligentTieringConfigurations
      # InventoryConfigurations:
      #   InventoryConfigurations
      LifecycleConfiguration:
        Rules:
          - Id: 'PnSsAbortIncompleteMultipartUpload'
            AbortIncompleteMultipartUpload: 
                DaysAfterInitiation: 1
            Status: 'Enabled'
          - Id: 'PnSsNotificationAttachmentTemporary'
            ExpirationInDays: 1
            Status: 'Enabled'
            TagFilters: 
              - Key: 'storageType'
                Value: 'PN_TEMPORARY_DOCUMENT'
          - Id: 'PnSsNotificationAttachment'
            ExpirationInDays: 1
            Status: 'Enabled'
            TagFilters:
              - Key: 'storageType'
                Value: 'PN_NOTIFIED_DOCUMENT'
          - Id: 'PnSsAar'
            ExpirationInDays: 2
            Status: 'Enabled'
            TagFilters: 
              - Key: 'storageType'
                Value: 'PN_AAR'
            Transitions: 
              - StorageClass: 'DEEP_ARCHIVE'
                TransitionInDays: 1
          - Id: 'PnSsLegalFacts'
            ExpirationInDays: 2
            Status: 'Enabled'
            TagFilters: 
              - Key: 'storageType'
                Value: 'PN_LEGAL_FACTS'
            Transitions: 
              - StorageClass: 'DEEP_ARCHIVE'
                TransitionInDays: 1
      #LoggingConfiguration:
      #  DestinationBucketName: 'String'
      #  LogFilePrefix: 'String'
      # MetricsConfigurations:
      #  MetricsConfigurations
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: 's3:ObjectCreated:*'
            Function: !Sub 'arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${PnSsGestoreBucketLambdaNameIn}'
          - Event: 's3:ObjectRemoved:Delete'
            Function: !Sub 'arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${PnSsGestoreBucketLambdaNameIn}'
          - Event: 's3:ObjectRestore:*'
            Function: !Sub 'arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${PnSsGestoreBucketLambdaNameIn}'
          - Event: 's3:LifecycleExpiration:Delete'
            Function: !Sub 'arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${PnSsGestoreBucketLambdaNameIn}'
          - Event: 's3:LifecycleTransition'
            Function: !Sub 'arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${PnSsGestoreBucketLambdaNameIn}'
          # - Event: 's3:Replication'
            # Function: !GetAtt PnSsGestoreBucket.Arn
      # ObjectLockEnabled: true
      # ObjectLockConfiguration:
      #   ObjectLockEnabled: 'Enabled'
      #   Rule: 
      #     DefaultRetention: 
      #       Days: 1
      #       Mode: !If [ IsProdEnv , 'COMPLIANCE' , 'GOVERNANCE']
      #       # Years: 
      VersioningConfiguration:
        Status: Enabled
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      #ReplicationConfiguration:
      #  Role: 'false'
      #  Rules:
      #    -

  PnSsStagingBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: 'Private'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: true
            ServerSideEncryptionByDefault:
              SSEAlgorithm: 'aws:kms'
              #  KMSMasterKeyID: KMS-KEY-AR
      #LoggingConfiguration:
      #  DestinationBucketName: 'String'
      #  LogFilePrefix: 'String'
      #MetricsConfigurations:
      #  MetricsConfigurations
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  PnSsQueueStagingBucket:
    Type: AWS::SQS::Queue
    Properties:
      KmsDataKeyReusePeriodSeconds: 300
      # KmsMasterKeyId: 'alias/aws/sqs'
      MessageRetentionPeriod: 1209600
      ReceiveMessageWaitTimeSeconds: 20      
      RedrivePolicy:
        deadLetterTargetArn : !GetAtt PnSsDLQueueStagingBucket.Arn
        maxReceiveCount : 10
      VisibilityTimeout: 30

  PnSsDLQueueStagingBucket:
    Type: AWS::SQS::Queue
    Properties:
      KmsDataKeyReusePeriodSeconds: 300
      KmsMasterKeyId: 'alias/aws/sqs'
      MessageRetentionPeriod: 1209600
      ReceiveMessageWaitTimeSeconds: 20
      VisibilityTimeout: 30 

  PnSsEventRuleStagingBucket:
    Type: AWS::Events::Rule
    Properties:
      Description: Description
      EventPattern:   
        source: 
          - 'aws.s3' 
        account: 
          - !Sub ${AWS::AccountId}
        region:
          - !Sub ${AWS::Region}
        detail-type: 
          - 'Object Created'
        detail:
          bucket:
            name: 
              - !Ref PnSsStagingBucket
        resources:
          - !GetAtt PnSsStagingBucket.Arn
      State: 'ENABLED'
      Targets:
        - Arn: !GetAtt PnSsQueueStagingBucket.Arn
          Id: "SQSTargetForStagingBucket"
  
  #### RISORSE PER GESTORE DISPONIBILITA' ####
  PnSsQueueNotificheExt1:
    Type: AWS::SQS::Queue
    Properties:
      # KmsDataKeyReusePeriodSeconds: 300
      # KmsMasterKeyId: 'alias/aws/sqs'
      SqsManagedSseEnabled: True
      MessageRetentionPeriod: 1209600
      ReceiveMessageWaitTimeSeconds: 1      
      RedrivePolicy:
        deadLetterTargetArn : !GetAtt PnSsDLQueueNotificheExt1.Arn
        maxReceiveCount : 10
      VisibilityTimeout: 30

  PnSsDLQueueNotificheExt1:
    Type: AWS::SQS::Queue
    Properties:
      KmsDataKeyReusePeriodSeconds: 300
      KmsMasterKeyId: 'alias/aws/sqs'
      MessageRetentionPeriod: 1209600
      ReceiveMessageWaitTimeSeconds: 1
      VisibilityTimeout: 30

  PnSsEventBusExternalNotification: 
    Type: AWS::Events::EventBus
    Properties: 
        Name: !Ref PnSsEventBusExternalNotificationName

  PnSsEventBusPolicyECSExternalNotification:
    Type: AWS::Events::EventBusPolicy
    Properties:
      EventBusName: !Ref PnSsEventBusExternalNotification
      StatementId: 'PnSsCustomEventBusPolicyAllowS'
      Statement:
        Action: 
          - "events:PutEvents"
        Effect: "Allow"
        Principal: 
          Service:
          - 'ecs.amazonaws.com'
        Resource: !GetAtt PnSsEventBusExternalNotification.Arn
        # Condition: 
        #   ArnEquals:
        #     aws:SourceArn: ECS ARN ??

  PnSsEventBusPolicyManageExternalNotification:
    Type: AWS::Events::EventBusPolicy
    Properties:
      EventBusName: !Ref PnSsEventBusExternalNotification
      StatementId: 'PnSsCustomEventBusPolicyManage'
      Statement:
        Action: 
          - 'events:PutRule'
          - 'events:PutTargets'
          - 'events:DeleteRule'
          - 'events:RemoveTargets'
          - 'events:DisableRule'
          - 'events:EnableRule'
          - 'events:TagResource'
          - 'events:UntagResource'
          - 'events:DescribeRule'
          - 'events:ListTargetsByRule'
          - 'events:ListTagsForResource'
        Effect: 'Allow'
        Resource: !GetAtt PnSsEventBusExternalNotification.Arn
        Principal: 
          AWS: !Sub '${AWS::AccountId}'
        Condition:
          StringEqualsIfExists:
            events:creatorAccount: !Sub '${AWS::AccountId}'     

  PnSsQueuePolicyNotificheExt1:
    Type: AWS::SQS::QueuePolicy
    Properties: 
      Queues: 
        - !Ref PnSsQueueNotificheExt1
      PolicyDocument: 
        Statement: 
          - Sid: 'AllowAccessSameAccount'
            Action: 
              - "SQS:*"
            Effect: "Allow"
            Resource: !GetAtt PnSsQueueNotificheExt1.Arn
            Principal: 
              AWS: !Sub ${AWS::AccountId}
          - Sid: 'AllowPutEventsFromEventRule'
            Action: 
              - "sqs:SendMessage"
            Effect: "Allow"
            Resource: !GetAtt PnSsQueueNotificheExt1.Arn
            Principal: 
              Service:
              - 'events.amazonaws.com'
            Condition: 
              ArnEquals:
                aws:SourceArn: !GetAtt PnSsEventRuleNotificheExt1.Arn

  PnSsEventRuleNotificheExt1:
    Type: AWS::Events::Rule
    Properties:
      EventBusName: !Ref PnSsEventBusExternalNotification
      Description: Description
      EventPattern:
        source: 
          - "GESTORE DISPONIBILITA"
        account: 
          - !Sub ${AWS::AccountId}
        region: 
          - !Sub ${AWS::Region}
      State: 'ENABLED'
      Targets:
        - Arn: !GetAtt PnSsQueueNotificheExt1.Arn
          Id: 'Ext1QueueTargetForExtNotification'

Outputs:
  PnSsTableNameAnagraficaClient:
    Description: 'Nome della tabella SS Anagrafica Client'
    Value: !Ref PnSsTableAnagraficaClient
  
  PnSsTableArnAnagraficaClient:
    Description: 'ARN della Tabella DynamoDB relativa alla Macchina a Stati'
    Value: !GetAtt PnSsTableAnagraficaClient.Arn
  
  PnSsTableNameTipologieDocumenti:
    Description: 'Nome della tabella SS Tipologie Documenti'
    Value: !Ref PnSsTableTipologieDocumenti

  PnSsTableArnTipologieDocumenti:
    Description: 'ARN della tabella SS Tipologie Documenti'
    Value: !GetAtt PnSsTableTipologieDocumenti.Arn
  
  PnSsTableNameDocumenti:
    Description: 'Nome tabella SS Documenti'
    Value: !Ref PnSsTableDocumenti

  PnSsTableArnDocumenti:
    Description: 'ARN della tabella SS Documenti'
    Value: !GetAtt PnSsTableDocumenti.Arn

  PnSsTableDocumentiStreamArn:
    Description: 'Nome tabella SS Documenti'
    Value: !GetAtt PnSsTableDocumenti.StreamArn

  PnSsBucketName:
    Description: 'Nome Bucket SS'
    Value: !Ref PnSsBucket

  PnSsBucketArn:
    Description: 'ARN Bucket SS'
    Value: !GetAtt PnSsBucket.Arn
  
  PnSsStagingBucketName:
    Description: 'Nome Bucket SS Staging'
    Value: !Ref PnSsStagingBucket

  PnSsStagingBucketArn:
    Description: 'ARN Bucket SS Staging'
    Value: !GetAtt PnSsStagingBucket.Arn

  PnSsQueueNameStagingBucket:
    Description: 'Nome coda per notifiche SS Staging Bucket'
    Value: !GetAtt  PnSsQueueStagingBucket.QueueName

  PnSsQueueArnStagingBucket:
    Description: 'ARN coda per notifiche SS Staging Bucket'
    Value: !GetAtt  PnSsQueueStagingBucket.Arn

  PnSsQueueUrlStagingBucket:
    Description: 'URL coda per notifiche SS Staging Bucket'
    Value: !Ref PnSsQueueStagingBucket

  PnSsDLQueueNameStagingBucket:
    Description: 'Nome coda DLQ per notifiche SS Staging Bucket'
    Value: !GetAtt PnSsDLQueueStagingBucket.QueueName

  PnSsGestoreBucketLambdaName:
    Description: 'Nome della Lambda function che implementa la funzionalit√† del Gestore Bucket'
    Value: !Ref PnSsGestoreBucketLambdaNameIn

  PnSsEventBusNameExternalNotification:
    Description: 'Nome event bus per pubblicare eventi di Gestore Disponibilita'
    Value: !Ref  PnSsEventBusExternalNotification

  PnSsEventBusArnExternalNotification:
    Description: 'Arn event bus per pubblicare eventi di Gestore Disponibilita'
    Value: !GetAtt  PnSsEventBusExternalNotification.Arn

  PnSsQueueNameNotificheExt1:
    Description: 'Nome coda per catturare eventi generati da Gestore Disponibilita'
    Value: !GetAtt  PnSsQueueNotificheExt1.QueueName

  PnSsQueueArnNotificheExt1:
    Description: 'ARN coda per catturare eventi generati da Gestore Disponibilita'
    Value: !GetAtt  PnSsQueueNotificheExt1.Arn

  PnSsQueueUrlNotificheExt1:
    Description: 'URL coda per catturare eventi generati da Gestore Disponibilita'
    Value: !Ref PnSsQueueNotificheExt1

  PnSsDLQueueNameNotificheExt1:
    Description: 'Nome coda per catturare eventi generati da Gestore Disponibilita'
    Value: !GetAtt  PnSsDLQueueNotificheExt1.QueueName

  PnSsDLQueueArnNotificheExt1:
    Description: 'ARN coda per catturare eventi generati da Gestore Disponibilita'
    Value: !GetAtt  PnSsDLQueueNotificheExt1.Arn

  PnSsDLQueueUrlNotificheExt1:
    Description: 'URL coda per catturare eventi generati da Gestore Disponibilita'
    Value: !Ref PnSsDLQueueNotificheExt1