AWSTemplateFormatVersion: '2010-09-09'
Description: Some storage with input and output

Parameters:
  ProjectName:
    Type: String
    Description: Nome dell'ambiente destinazione

  # Unused but required by CD pipeline
  MicroserviceNumber:
    Type: Number
    Description: An unique number that identify the microservice inside the ECS cluster.

  # Unused but required by CD pipeline
  TemplateBucketBaseUrl:
    Type: String
    Description: URL da cui caricare i frammenti di template di infrastruttura

  Version:
    Type: String
    Description: 'keep track of used projects commitIds'
  
  # CdcKinesisSourceStreamArn:
  #   Type: String
  #   Description: 'Where to send CDC'

  PnSsGestoreBucketLambdaNameIn:
    Type: String
    Description: 'Nome della Lambda function che implementa la funzionalità del Gestore Bucket'
    Default: 'pn-safe-storage-gestore-bucket-lambda'

  DeployEnv:
    Type: String
    Description: Nome dell'ambiente destinazione
    Default: DEV
  
  PnSsEventBusExternalNotificationName:
    Type: String 
    Description: 'Nome del Event Bus che raccoglie gli eventi del microservizio Gestore Disponibilita'
    Default: 'Pn-Ss-Notifications-Bus'

Conditions:
  IsProdEnv: !Equals ['PROD', !Ref DeployEnv]
  IsDevEnv: !Equals [!Ref 'AWS::AccountId', '063295570123']

Resources:

  PnSsTableAnagraficaClient:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: 'name'
          AttributeType: 'S'
      KeySchema: 
        - AttributeName: 'name'
          KeyType: 'HASH'
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      SSESpecification:
        SSEEnabled: true
        SSEType: 'KMS'
      TableClass: 'STANDARD'
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain

  PnSsTableTipologieDocumenti:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: 'tipoDocumento'
          AttributeType: 'S'
      KeySchema: 
        - AttributeName: 'tipoDocumento'
          KeyType: 'HASH'
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      SSESpecification:
        SSEEnabled: true
        SSEType: 'KMS'
      TableClass: 'STANDARD'
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain

  PnSsTableDocumenti:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: 'documentKey'
          AttributeType: 'S'
      KeySchema: 
        - AttributeName: 'documentKey'
          KeyType: 'HASH'
      StreamSpecification:
          StreamViewType: 'NEW_AND_OLD_IMAGES'
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      SSESpecification:
        SSEEnabled: true
        SSEType: 'KMS'
      TableClass: 'STANDARD'
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain

  PnSsBucket:
    Type: AWS::S3::Bucket
    DependsOn: PnSsQueuePolicyGestoreBucketInvoke 
    Properties:
      AccessControl: 'Private'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: true
            ServerSideEncryptionByDefault:
              SSEAlgorithm: 'aws:kms'
              #  KMSMasterKeyID: KMS-KEY-AR
      CorsConfiguration:  
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - 'GET'
              - 'PUT'
              - 'HEAD'
              - 'POST'
              - 'DELETE'
            AllowedOrigins:
              - '*'
            ExposedHeaders:
              - 'x-amz-version-id'
            MaxAge: 3600
            Id: 'CORSRuleSafeStorage'
      LifecycleConfiguration:
        Rules:
          - Id: 'PnSsAbortIncompleteMultipartUpload'
            AbortIncompleteMultipartUpload: 
                DaysAfterInitiation: 1
            Status: 'Enabled'
          - Id: 'PnSsNotificationAttachmentTemporary'
            ExpirationInDays: 1
            Status: 'Enabled'
            TagFilters: 
              - Key: 'storageType'
                Value: 'PN_TEMPORARY_DOCUMENT'
          - Id: 'PnSsNotificationAttachment'
            ExpirationInDays: 120
            Status: 'Enabled'
            TagFilters:
              - Key: 'storageType'
                Value: 'PN_NOTIFIED_DOCUMENTS'
          - Id: 'PnSsAar'
            ExpirationInDays: 3655
            Status: 'Enabled'
            TagFilters: 
              - Key: 'storageType'
                Value: 'PN_AAR'
            Transitions: 
              - StorageClass: 'GLACIER'
                TransitionInDays: 120
          - Id: 'PnSsLegalFacts'
            ExpirationInDays: 3655
            Status: 'Enabled'
            TagFilters: 
              - Key: 'storageType'
                Value: 'PN_LEGAL_FACTS'
            Transitions: 
              - StorageClass: 'GLACIER'
                TransitionInDays: 120
          - Id: 'PnSsLogsArchiveAudit5Y'
            ExpirationInDays: 1830
            Status: 'Enabled'
            TagFilters: 
              - Key: 'storageType'
                Value: 'PN_LOGS_ARCHIVE_AUDIT5Y'
            Transitions: 
              - StorageClass: 'GLACIER'
                TransitionInDays: 1
          - Id: 'PnSsLogsArchiveAudit10Y'
            ExpirationInDays: 3655
            Status: 'Enabled'
            TagFilters: 
              - Key: 'storageType'
                Value: 'PN_LOGS_ARCHIVE_AUDIT10Y'
            Transitions: 
              - StorageClass: 'GLACIER'
                TransitionInDays: 1
      NotificationConfiguration:
        QueueConfigurations:
          - Event: 's3:ObjectCreated:*'
            Queue: !GetAtt PnSsQueueGestoreBucketInvoke.Arn
          - Event: 's3:ObjectRemoved:*'
            Queue: !GetAtt PnSsQueueGestoreBucketInvoke.Arn
          - Event: 's3:ObjectRestore:*'
            Queue: !GetAtt PnSsQueueGestoreBucketInvoke.Arn
          - Event: 's3:LifecycleExpiration:Delete'
            Queue: !GetAtt PnSsQueueGestoreBucketInvoke.Arn
          - Event: 's3:LifecycleTransition'
            Queue: !GetAtt PnSsQueueGestoreBucketInvoke.Arn
          # - Event: 's3:Replication'
            # Function: !GetAtt PnSsGestoreBucket.Arn
      ObjectLockEnabled: true
      # ObjectLockConfiguration:
      #   ObjectLockEnabled: 'Enabled'
      #   Rule: 
      #     DefaultRetention: 
      #       Days: 1
      #       Mode: !If [ IsProdEnv , 'COMPLIANCE' , 'GOVERNANCE']
      #       # Years: 
      VersioningConfiguration:
        Status: Enabled
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      #ReplicationConfiguration:
      #  Role: 'false'
      #  Rules:
      #    -

  PnSsStagingBucket:
    Type: AWS::S3::Bucket
    DependsOn: PnSsQueuePolicyGestoreBucketInvoke
    Properties:
      AccessControl: 'Private'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: true
            ServerSideEncryptionByDefault:
              SSEAlgorithm: 'aws:kms'
              #  KMSMasterKeyID: KMS-KEY-AR
      LifecycleConfiguration:
        Rules:
          - Id: 'PnSsStagingAbortIncompleteMultipartUpload'
            AbortIncompleteMultipartUpload: 
                DaysAfterInitiation: 1
            Status: 'Enabled'
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true
        QueueConfigurations:
          - Event: 's3:ObjectCreated:*'
            Queue: !GetAtt PnSsQueueGestoreBucketInvoke.Arn
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  PnSsQueueStagingBucket:
    Type: AWS::SQS::Queue
    Properties:
      SqsManagedSseEnabled: True
      MessageRetentionPeriod: 1209600
      ReceiveMessageWaitTimeSeconds: 20      
      RedrivePolicy:
        deadLetterTargetArn : !GetAtt PnSsDLQueueStagingBucket.Arn
        maxReceiveCount : 10
      VisibilityTimeout: 30

  PnSsDLQueueStagingBucket:
    Type: AWS::SQS::Queue
    Properties:
      SqsManagedSseEnabled: True
      MessageRetentionPeriod: 1209600
      ReceiveMessageWaitTimeSeconds: 20
      VisibilityTimeout: 30 

########### GESTORE BUCKET INVOKE QUEUE ###########
# La coda PnSsQueueGestoreBucketInvoke è il target delle S3 notifications provenienti dal bucket principale #
# visibility timeout docs https://docs.aws.amazon.com/lambda/latest/dg/with-sqs.html#events-sqs-queueconfig 
  PnSsQueueGestoreBucketInvoke:
    Type: AWS::SQS::Queue
    Properties:
      SqsManagedSseEnabled: True
      MessageRetentionPeriod: 1209600
      ReceiveMessageWaitTimeSeconds: 0      
      RedrivePolicy:
        deadLetterTargetArn : !GetAtt PnSsDLQueueGestoreBucketInvoke.Arn
        maxReceiveCount : 10
      VisibilityTimeout: 360 # currently ReceiveMessageWaitTimeSeconds + 3 times the timeout of Lambda Fun Gestore Bucket 

  PnSsDLQueueGestoreBucketInvoke:
    Type: AWS::SQS::Queue
    Properties:
      SqsManagedSseEnabled: True
      MessageRetentionPeriod: 1209600
      ReceiveMessageWaitTimeSeconds: 0
      VisibilityTimeout: 30

  PnSsQueuePolicyGestoreBucketInvoke:
    Type: AWS::SQS::QueuePolicy
    Properties: 
      Queues: 
        - !Ref PnSsQueueGestoreBucketInvoke
      PolicyDocument:
        Version: '2012-10-17'
        Statement: 
          - Action: 
            - 'SQS:*'
            Effect: "Allow"
            Resource: !GetAtt PnSsQueueGestoreBucketInvoke.Arn
            Principal:
              Service: 's3.amazonaws.com'

########### GESTORE BUCKET INVOKE DLQ ###########
# La coda PnSsQueueGestoreBucketInvokeErrors è la DLQ configurata per la risorsa Gestore Bucket (Lambda) #
  PnSsQueueGestoreBucketInvokeErrors:
    Type: AWS::SQS::Queue
    Properties:
      SqsManagedSseEnabled: True
      MessageRetentionPeriod: 1209600
      ReceiveMessageWaitTimeSeconds: 0      
      RedrivePolicy:
        deadLetterTargetArn : !GetAtt PnSsDLQueueGestoreBucketInvokeErrors.Arn
        maxReceiveCount : 10
      VisibilityTimeout: 30

  PnSsDLQueueGestoreBucketInvokeErrors:
    Type: AWS::SQS::Queue
    Properties:
      SqsManagedSseEnabled: True
      MessageRetentionPeriod: 1209600
      ReceiveMessageWaitTimeSeconds: 0
      VisibilityTimeout: 30

########### GESTORE DISPONIBILITA' EXTERNAL NOTIFICATION ###########
  PnSsEventBusExternalNotification: 
    Type: AWS::Events::EventBus
    Properties: 
        Name: !Ref PnSsEventBusExternalNotificationName

  PnSsEventBusPolicyECSExternalNotification:
    Type: AWS::Events::EventBusPolicy
    Properties:
      EventBusName: !Ref PnSsEventBusExternalNotification
      StatementId: 'PnSsCustomEventBusPolicyAllowS'
      Statement:
        Action: 
          - "events:PutEvents"
        Effect: "Allow"
        Principal: 
          Service:
          - 'ecs.amazonaws.com'
        Resource: !GetAtt PnSsEventBusExternalNotification.Arn

  PnSsEventBusPolicyManageExternalNotification:
    Type: AWS::Events::EventBusPolicy
    Properties:
      EventBusName: !Ref PnSsEventBusExternalNotification
      StatementId: 'PnSsCustomEventBusPolicyManage'
      Statement:
        Action: 
          - 'events:PutRule'
          - 'events:PutTargets'
          - 'events:DeleteRule'
          - 'events:RemoveTargets'
          - 'events:DisableRule'
          - 'events:EnableRule'
          - 'events:TagResource'
          - 'events:UntagResource'
          - 'events:DescribeRule'
          - 'events:ListTargetsByRule'
          - 'events:ListTagsForResource'
        Effect: 'Allow'
        Resource: !GetAtt PnSsEventBusExternalNotification.Arn
        Principal: 
          AWS: !Sub '${AWS::AccountId}'
        Condition:
          StringEqualsIfExists:
            events:creatorAccount: !Sub '${AWS::AccountId}'

  PnSsQueueNotificheExt1:
    Type: AWS::SQS::Queue
    Condition: IsDevEnv
    Properties:
      SqsManagedSseEnabled: True
      MessageRetentionPeriod: 1209600
      ReceiveMessageWaitTimeSeconds: 0      
      VisibilityTimeout: 30
    
  PnSsEventRuleNotificheExt1:
    Type: AWS::Events::Rule
    Condition: IsDevEnv
    Properties:
      EventBusName: !Ref PnSsEventBusExternalNotification
      EventPattern:
        source: 
          - "GESTORE DISPONIBILITA"
        account: 
          - !Sub ${AWS::AccountId}
        region: 
          - !Sub ${AWS::Region}
      State: 'ENABLED'
      Targets:
        - Arn: !GetAtt PnSsQueueNotificheExt1.Arn
          Id: 'PnSsExt1QueueTargetForExtNotification'

  # ####### DENY POLICY FROM OUTSIDE ACCOUNT ########
  # PnSsEventBusPolicyDenyExternalNotification:
  #   Type: AWS::Events::EventBusPolicy
  #   Properties:
  #     EventBusName: !Ref PnSsEventBusExternalNotification
  #     StatementId: 'PnEcCustomEventBusPolicyDenyCrossAccount'
  #     Statement:
  #       Action: 
  #         - "events:*"
  #       Effect: 'Deny'
  #       Principal: 
  #         Service:
  #           - 'ecs.amazonaws.com'
  #       Resource: !GetAtt PnSsEventBusExternalNotification.Arn
  #       Condition:
  #         StringNotEquals:
  #           aws:SourceAccount: !Sub '${AWS::AccountId}'

Outputs:
  PnSsTableNameAnagraficaClient:
    Description: 'Nome della tabella SS Anagrafica Client'
    Value: !Ref PnSsTableAnagraficaClient
  
  PnSsTableArnAnagraficaClient:
    Description: 'ARN della Tabella DynamoDB relativa alla Macchina a Stati'
    Value: !GetAtt PnSsTableAnagraficaClient.Arn
  
  PnSsTableNameTipologieDocumenti:
    Description: 'Nome della tabella SS Tipologie Documenti'
    Value: !Ref PnSsTableTipologieDocumenti

  PnSsTableArnTipologieDocumenti:
    Description: 'ARN della tabella SS Tipologie Documenti'
    Value: !GetAtt PnSsTableTipologieDocumenti.Arn
  
  PnSsTableNameDocumenti:
    Description: 'Nome tabella SS Documenti'
    Value: !Ref PnSsTableDocumenti

  PnSsTableArnDocumenti:
    Description: 'ARN della tabella SS Documenti'
    Value: !GetAtt PnSsTableDocumenti.Arn

  PnSsTableDocumentiStreamArn:
    Description: 'Nome tabella SS Documenti'
    Value: !GetAtt PnSsTableDocumenti.StreamArn

  PnSsBucketName:
    Description: 'Nome Bucket SS'
    Value: !Ref PnSsBucket

  PnSsBucketArn:
    Description: 'ARN Bucket SS'
    Value: !GetAtt PnSsBucket.Arn
  
  PnSsStagingBucketName:
    Description: 'Nome Bucket SS Staging'
    Value: !Ref PnSsStagingBucket

  PnSsStagingBucketArn:
    Description: 'ARN Bucket SS Staging'
    Value: !GetAtt PnSsStagingBucket.Arn

  PnSsQueueNameStagingBucket:
    Description: 'Nome coda per notifiche SS Staging Bucket'
    Value: !GetAtt  PnSsQueueStagingBucket.QueueName

  PnSsQueueArnStagingBucket:
    Description: 'ARN coda per notifiche SS Staging Bucket'
    Value: !GetAtt  PnSsQueueStagingBucket.Arn

  PnSsQueueUrlStagingBucket:
    Description: 'URL coda per notifiche SS Staging Bucket'
    Value: !Ref PnSsQueueStagingBucket

  PnSsDLQueueNameStagingBucket:
    Description: 'Nome coda DLQ per notifiche SS Staging Bucket'
    Value: !GetAtt PnSsDLQueueStagingBucket.QueueName

  PnSsQueueNameGestoreBucketInvokeErrors:
    Description: 'Nome coda per pubblicazione errori del Gestore Bucket'
    Value: !GetAtt  PnSsQueueGestoreBucketInvokeErrors.QueueName

  PnSsQueueArnGestoreBucketInvokeErrors:
    Description: 'ARN coda per pubblicazione errori del Gestore Bucket'
    Value: !GetAtt  PnSsQueueGestoreBucketInvokeErrors.Arn

  PnSsQueueUrlGestoreBucketInvokeErrors:
    Description: 'URL coda per pubblicazione errori del Gestore Bucket'
    Value: !Ref PnSsQueueGestoreBucketInvokeErrors

  PnSsDLQueueNameGestoreBucketInvokeErrors:
    Description: 'Nome coda DLQ per pubblicazione errori del Gestore Bucket'
    Value: !GetAtt PnSsDLQueueGestoreBucketInvokeErrors.QueueName

  PnSsQueueNameGestoreBucketInvoke:
    Description: 'Nome coda per pubblicazione notifiche di eventi sul bucket SS'
    Value: !GetAtt  PnSsQueueGestoreBucketInvoke.QueueName

  PnSsQueueArnGestoreBucketInvoke:
    Description: 'ARN coda per pubblicazione notifiche di eventi sul bucket SS'
    Value: !GetAtt  PnSsQueueGestoreBucketInvoke.Arn

  PnSsQueueUrlGestoreBucketInvoke:
    Description: 'URL coda per pubblicazione notifiche di eventi sul bucket SS'
    Value: !Ref PnSsQueueGestoreBucketInvoke

  PnSsDLQueueNameGestoreBucketInvoke:
    Description: 'Nome coda DLQ per pubblicazione notifiche di eventi sul bucket SS'
    Value: !GetAtt PnSsDLQueueGestoreBucketInvoke.QueueName

  PnSsGestoreBucketLambdaName:
    Description: 'Nome della Lambda function che implementa la funzionalità del Gestore Bucket'
    Value: !Ref PnSsGestoreBucketLambdaNameIn

  PnSsEventBusNameExternalNotification:
    Description: 'Nome event bus per pubblicare eventi di Gestore Disponibilita'
    Value: !Ref  PnSsEventBusExternalNotification

  PnSsEventBusArnExternalNotification:
    Description: 'Arn event bus per pubblicare eventi di Gestore Disponibilita'
    Value: !GetAtt  PnSsEventBusExternalNotification.Arn