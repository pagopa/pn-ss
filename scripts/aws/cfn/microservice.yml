AWSTemplateFormatVersion: 2010-09-09
Description: 'Example microservice deploy'

Parameters:
  ProjectName:
    Type: String
    Description: 'Usually pn can be pnXYZ where XYZ are the feature number, useful to create
      experimental environments without crash official development environment'

  AlarmSNSTopicArn:
    Type: String
    Description: ARN of alarm topic

  # WebApiDnsName:
  #   Type: String
  #   Description: 'The DNS name used for WEB rest API.'

  # CorsAllowedDomains:
  #   Type: String
  #   Description: 'Comma separated list of domains allowed to make cross origin request'

  ContainerImageUri:
    Type: String
    Description: 'Exact container image URI with full repository and image digest'

  MicroserviceNumber:
    Type: Number
    Description: 'Disambiguation useful for load balancer rules'

  TemplateBucketBaseUrl:
    Type: String
    Description: 'The S3 bucket from which to fetch the templates used by this stack.'

  ECSClusterName:
    Type: String
    Description: 'The name of the ECS cluster where the microservice is going to be deployed'

  VpcEgressSubnetsIds:
    Type: String
    Description: subnets where to install PN-CONFIDENTIAL-INFO

  SubnetsIds:
    Type: String
    Description: 'subnets ids comma separated list. Where to deploy the microservice'

  VpcId:
    Type: String
    Description: 'VpcId where the microservice is going to be deployed'

  EcsDefaultSecurityGroup:
    Type: String
    Description: 'Default security group required by infrastructure'

  ApplicationLoadBalancerListenerArn:
    Type: String
    Description: 'Load balancer listener where HTTP endpoints is going to be registered'

  ApplicationLoadBalancerDomain:
    Type: String
    Description: 'Base URL of the load balancer where the service is going to be reachable'

  NetworkLoadBalancerLink:
    Type: String
    Description: 'network load balancer link for API-GW'
    Default: ''

  # LogsKinesisSourceStreamArn:
  #   Type: String
  #   Description: 'Kinesis stream that receive logs'

  ConfinfoEventBusArn:
    Type: String
    Description: Confinfo event bus ARN

  Version:
    Type: String
    Description: 'keep track of used projects commitIds'

  PnCoreTargetEventBus:
    Type: String
    Description: 'ARN of Pn Core Event Bus where to forward external notifications'
    Default: ''

  TrailName:
    Type: String
    Description: 'Presigned Url usage trail name'
    Default: 'pn-ss-presigned-url-usage'

  SafeStorageFileAccessLogsBucketName:
    Type: String
    Default: '-'
    Description: 'presigned url usage log bucket name'

  SafeStorageFileAccessLogsBucketPathPrefix:
    Type: String
    Default: 'safeStorageObjectPutAndGetTracing'
    Description: 'Destination path into bucket name'

#### Parametri provenienti dal Template della Stack SS-Storage ####
  PnSsTableNameAnagraficaClient:
    Type: String
    Description: 'Nome della tabella SS Anagrafica Client'

  PnSsTableArnAnagraficaClient:
    Type: String
    Description: 'ARN della Tabella DynamoDB relativa alla Macchina a Stati'

  PnSsTableNameTipologieDocumenti:
    Type: String
    Description: 'Nome della tabella SS Tipologie Documenti'

  PnSsTableArnTipologieDocumenti:
    Type: String
    Description: 'ARN della tabella SS Tipologie Documenti'

  PnSsTableNameDocumenti:
    Type: String
    Description: 'Nome tabella SS Documenti'

  PnSsTableArnDocumenti:
    Type: String
    Description: 'ARN della tabella SS Documenti'

  PnSsTableDocumentiStreamArn:
    Type: String
    Description: 'ARN dello stream relativo alla tabella SS Documenti'

  PnSsTableArnScadenzaDocumenti:
    Type: String
    Description: 'ARN della tabella SS Scadenza Documenti'

  PnSsTableNameScadenzaDocumenti:
    Type: String
    Description: 'Nome della tabella SS Scadenza Documenti'

  PnSsTableScadenzaDocumentiStreamArn:
    Type: String
    Description: 'ARN dello stream relativo alla tabella SS Scadenza Documenti'

  PnSsTableNameTags:
    Type: String
    Description: 'Nome tabella conteniente i tags'

  PnSsTableArnTags:
    Type: String
    Description: 'ARN tabella conteniente i tags'

  PnSsBucketName:
    Type: String
    Description: 'Nome del Bucket SS'

  PnSsBucketArn:
    Type: String
    Description: 'ARN del Bucket SS'

  PnSsStagingBucketName:
    Type: String
    Description: 'Nome Bucket SS Staging'

  PnSsStagingBucketArn:
    Type: String
    Description: 'ARN Bucket SS Staging'

  PnSsQueueNameStagingBucket:
    Type: String
    Description: 'Nome coda per notifiche SS Staging Bucket'

  PnSsQueueArnStagingBucket:
    Type: String
    Description: 'ARN coda per notifiche SS Staging Bucket'

  PnSsQueueUrlStagingBucket:
    Type: String
    Description: 'URL coda per notifiche SS Staging Bucket'

  PnSsDLQueueNameStagingBucket:
    Type: String
    Description: 'Nome coda DLQ per notifiche SS Staging Bucket'

  PnSsAlarmArnQueueStagingBucket:
    Type: String
    Description: "ARN dell'allarme messaggi vecchi nella coda notifiche SS Staging Bucket "

  PnSsAlarmArnDLQueueStagingBucket:
    Type: String
    Description: "ARN dell'allarme per presenza di messaggi nella DLQ notifiche SS Staging Bucket "

  PnSsQueueNameGestoreBucketInvokeErrors:
    Type: String
    Description: 'Nome coda per pubblicazione errori del Gestore Bucket'

  PnSsQueueArnGestoreBucketInvokeErrors:
    Type: String
    Description: 'ARN coda per pubblicazione errori del Gestore Bucket'

  PnSsQueueUrlGestoreBucketInvokeErrors:
    Type: String
    Description: 'URL coda per pubblicazione errori del Gestore Bucket'

  PnSsDLQueueNameGestoreBucketInvokeErrors:
    Type: String
    Description: 'Nome coda DLQ per pubblicazione errori del Gestore Bucket'

  PnSsAlarmArnQueueGestoreBucketInvokeErrors:
    Type: String
    Description: "ARN dell'allarme messaggi vecchi nella coda errori del Gestore Bucket"

  PnSsAlarmArnDLQueueGestoreBucketInvokeErrors:
    Type: String
    Description: "ARN dell'allarme per presenza di messaggi nella DLQ errori del Gestore Bucket"

  PnSsQueueNameGestoreBucketInvoke:
    Type: String
    Description: 'Nome coda per pubblicazione notifiche di eventi dal bucket SS'

  PnSsQueueArnGestoreBucketInvoke:
    Type: String
    Description: 'ARN coda per pubblicazione notifiche di eventi dal bucket SS'

  PnSsQueueUrlGestoreBucketInvoke:
    Type: String
    Description: 'URL coda per pubblicazione notifiche di eventi dal bucket SS'

  PnSsDLQueueNameGestoreBucketInvoke:
    Type: String
    Description: 'Nome coda DLQ per pubblicazione notifiche di eventi dal bucket SS'

  PnSsAlarmArnQueueGestoreBucketInvoke:
    Type: String
    Description: "ARN dell'allarme messaggi vecchi nella coda notifiche di eventi sul bucket SS"

  PnSsAlarmArnDLQueueGestoreBucketInvoke:
    Type: String
    Description: "ARN dell'allarme per presenza di messaggi nella DLQ notifiche di eventi sul bucket SS"

  PnSsManagedPolicyName:
    Type: String
    Description: 'Nome della managed policy de lmicroservizio Safe Storage'
    Default: 'PnSsManagedPolicyName'

  PnSsEventBusNameExternalNotification:
    Type: String
    Description: 'Nome event bus per pubblicare eventi di Gestore Disponibilita'

  PnSsEventBusArnExternalNotification:
    Type: String
    Description: 'Arn event bus per pubblicare eventi di Gestore Disponibilita'

  PnSsQueueNameEventsDLQueuePnCoreTargetEventBus:
    Type: String
    Description: 'Nome DLQ per forward degli eventi al bus PnCoreTargetEventBus'

  PnSsQueueArnEventsDLQueuePnCoreTargetEventBus:
    Type: String
    Description: 'ARN DLQ per forward degli eventi al bus PnCoreTargetEventBus'

  PnSsQueueUrlEventsDLQueuePnCoreTargetEventBus:
    Type: String
    Description: 'URL DLQ per forward degli eventi al bus PnCoreTargetEventBus'

  PnSsAlarmArnEventsDLQueuePnCoreTargetEventBus:
    Type: String
    Description: "ARN dell'allarme messaggi vecchi nella DLQ per forward degli eventi al bus PnCoreTargetEventBus"

  PnSsKmsArnBucket:
    Type: String
    Description: 'ARN della chiave KMS per la cifratura dei file nei bucket'

  PnSsQueueNameAvailability:
    Type: String
    Description: 'Nome coda per notifiche disponibilità'

  PnSsQueueArnAvailability:
    Type: String
    Description: 'ARN coda per notifiche disponibilità'

  PnSsQueueNameDummyTranformation:
    Type: String
    Description: 'Nome coda per trasformazione dummy'

  PnSsQueueArnDummyTranformation:
    Type: String
    Description: 'ARN coda per trasformazione dummy'

  PnSsQueueNameSignAndTimemarkTranformation:
    Type: String
    Description: 'Nome coda per trasformazione sign_and_timemark'

  PnSsQueueArnSignAndTimemarkTranformation:
    Type: String
    Description: 'ARN coda per tasformazione sign_and_timemark'

  PnSsQueueNameSignTranformation:
    Type: String
    Description: 'Nome coda per la trasformazione sign'

  PnSsQueueArnSignTranformation:
    Type: String
    Description: 'ARN coda per la trasformazione sign'

  #### Parametri presenti nel file json di configurazione  ###

  PnSsUriBuilderstayHotTime:
    Type: String
    Description: 'Days parameter for restoring of Staging Buckets objects in Glacier archive'

  PresignedUrlMinutesLifespan:
    Type: String
    Description: 'Minuti di validità dei pre-signed url prima della scadenza'

  PnVPCDefaultSecurityGroup:
    Type: String
    Description: 'VPC default Security Group'

  PnSsGestoreRepositoryProtocol:
    Type: String
    Description: 'Protocol for connecting to pn-ss Gestore Respository'

  PnSsGestoreRepositoryPort:
    Type: String
    Description: 'Port for connecting to pn-ss Gestore Respository'

  PnSsGestoreRepositoryPathGetDocument:
    Type: String
    Description: 'Path for GetDocument towards pn-ss Gestore Respository'

  PnSsGestoreRepositoryPathPatchDocument:
    Type: String
    Description: 'Path for PatchDocument towards pn-ss Gestore Respository'

  PnSsTableDocumentiStreamMetadatiTable:
    Type: String
    Description: 'Name of the DynamoDB Stream s metadata table for the source table PnSsDocumenti'

  PnSsArubaCertId:
    Type: String
    Description: 'Aruba param CertId'

  PnSsArubaEnabledLog:
    Type: String
    Description: 'Aruba param EnabledLog'

  PnSsArubaSignWsdlUrl:
    Type: String
    Description: 'Aruba param SignWsdlUrl'

  PnSsArubaQname:
    Type: String
    Description: 'Aruba param Qname'

  PnSsArubaSignService:
    Type: String
    Description: 'Aruba param SignService'

  PnSsTsaIdentity:
    Type: String
    Description: 'TsaIdentity'

  PnSsIdentitySignature:
    Type: String
    Description: 'Secret ID for Identity Signature'

  PnSsTimemarkUrl:
    Type: String
    Description: 'TimemarkUrl'

  PnSsSecurityGroupNameSafeStorage:
    Type: String
    Description: 'GestoreBucket Security Group'

  PnSsGestoreBucketLambdaName:
    Type: String
    Description: 'Name of Lambda function implementing functionality of Gestore Bucket'

  PnSsScadenzaDocumentiLambdaName:
    Type: String
    Description: 'Name of Lambda function implementing functionality of Scadenza Documenti'

  PnSsQueueNameScadenzaDocumentiDynamoStreamDLQ:
    Type: String
    Description: 'Nome coda DLQ per gestione errori di lavorazione dallo stream DynamoDB per lambda scadenzaDocumenti'

  PnSsQueueArnScadenzaDocumentiDynamoStreamDLQ:
    Type: String
    Description: 'ARN coda DLQ per gestione errori di lavorazione dallo stream DynamoDB per lambda scadenzaDocumenti'

  PnSsQueueUrlScadenzaDocumentiDynamoStreamDLQ:
    Type: String
    Description: 'URL coda DLQ per gestione errori di lavorazione dallo stream DynamoDB per lambda scadenzaDocumenti'

  PnSsGestoreBucketConcurrencyHandlerLambdaName:
    Type: String
    Description: "Name of Lambda function which updates Gestore Bucket's concurrency"

  PnSsEventRuleNameGestoreBucketConcurrencyHandler:
    Type: String
    Description: "Event Bridge Rule to trigger the update of Gestore Bucket's concurrrent instances"

  PnSsGestoreBucketInstancesPerTaskInstance:
    Type: String
    Description: 'Concurrent instances of Gestore Bucket for each instance of SS microservice task'
    Default: 20

  PnSsGestoreBucketMinReservedConcurrentExecutions:
    Type: Number
    Description: 'Maximum number of concurrent executions for Lambda Gestore Bucket'
    Default: 40

  MinTasksNumber:
    Type: Number
    Description: 'Minimum number of running instances for the microservice'
    Default: 2

  MaxTasksNumber:
    Type: Number
    Description: 'Maximum number of running instances for the microservice'
    Default: 6

  AutoscalingThreshold:
    Type: Number
    Description: 'Alarm threshold to trigger autoscaling of the microservice'
    Default: 20000

  PnSsUriBuilderGetFileWithPatchConfiguration:
    Type: String
    Description: 'Parametro getFileWithPatchConfiguration per UriBuilder'
    Default: 'NONE'
    AllowedValues: [ ALL,CLIENT_SPECIFIC,NONE ]

  PnSsTaskExecutionPoolMaxSize:
    Type: String
    Description: 'SpringBoot configuration Task Execution Max Pool Size'
    Default: 0

  PnSsTaskExecutionPoolCoreSize:
    Type: String
    Description: 'SpringBoot configuration Task Execution Pool Core Size'
    Default: 0

  PnSsTaskExecutionPoolQueueCapacity:
    Type: String
    Description: 'SpringBoot configuration Task Execution Pool Queue Capacity'
    Default: 0

  PnSsDocumentDeletionMode:
    Type: String
    Description: 'Modalità cancellazione da tabella scadenzaDocumenti'

  PnSignProviderSwitch:
    Type: String
    Description: 'Parameter used to switch provider for digital signature'

  PnSsSignRetryStrategyMaxAttempts:
    Type: String
    Description: 'Parameter used to define max number of retries'

  PnSsSignRetryStrategyMinBackoff:
    Type: String
    Description: 'Parameter used to define minimum backoff between attempts'

  PnSsSignAndTimemarkMetricsSchema:
    Type: String
    Description: 'Name of the AWS parameter that contains the schema for the metrics of the sign and timemark service'

  CpuValue:
    Type: Number
    Default: 1024
    Description: Fargate virtual CPU quantity 1024 equals one vCPU

  MemoryAmount:
    Type: String
    Default: '2GB'
    Description: Memory amount reserved to the task pod.
    AllowedValues: [ 2GB, 4GB, 6GB, 8GB ]

  PnSsIgnoredUpdateMetadataList:
    Type: String
    Default: ''
    Description: URL to the file containing the list of fileKeys which s3 object doesn't need to be updated.

  PnSsIndexingConfiguration:
    Type: String
    Description: 'Name of the parameter store containing the configuration for the indexing service'

  PnSsTransformationConfiguration:
    Type: String
    Description: 'Name of the parameter store containing the configuration for the transformation service'

  SpringCodecMaxInMemorySize:
    Type: String
    Description: 'Spring Codec Max Memory Size'

  SignAndTimemarkMaxThreadPoolSize:
    Type: String
    Description: 'Sign and timemark transformation max thread pool size'

  RasterMaxThreadPoolSize:
    Type: String
    Description: 'Raster transformation max thread pool size'

### Altri parametri
  AlarmSNSTopicName:
    Type: String
    Description: 'Topic alarm'

  PCKmsEncDecDynamoDataKeyARN:
    Type: String
    Description: 'Name of KMS Key for Dynamo encode/decode data'

  LogAlarmStrategy:
    Type: String
    Default: 'FATAL'

  PnSsPreloadedDocsRetentionDays:
    Type: Number
    Description: 'Numero di giorni di retention per i file di tipo PRELOADED'

  PnSsSafeClients:
    Type: String
    Description: 'List of safe clients'

  JavaToolOptions:
    Type: String
    Description: 'System properties and parameters for the JVM'
    Default: ''

  GestoreBucketGetObjectChunkSize:
    Type: String
    Description: 'Max Chunk size used by Gestore Bucket when retrieving object from bucket'
    Default: '1048576'

  MicroserviceBucketName:
    Type: String
    Description: 'Bucket name to upload lambda compiled package'

  MicroserviceBucketBaseKey:
    Type: String
    Description: 'S3 prefix to upload lambda compiled package'

  PnSsEventHandlerMaxMessages:
    Type: Number
    Description: 'Max number of messages to be processed by the StreamsRecordProcessor'

  PnSsSqsRetryStrategyMinBackoff:
    Type: Number
    Description: 'Min backoff time for SQS retry strategy'

  PnSsSqsRetryStrategyMaxAttempts:
    Type: Number
    Description: 'Max number of attempts for SQS retry strategy'

  PnSsTransformationServiceMaxMessages:
    Type: Number
    Description: 'Max number of messages to be processed by the TransformationService'

  # Namirial provider properties
  PnSsNamirialServerAddress:
    Type: String
    Description: 'Server address for Namirial'

  PnEcNamirialServerMaxConnections:
    Type: Number

  PnEcNamirialServerPendingAcquireTimeout:
    Type: Number
    Description: Value in seconds


  # Log group parameters
  EcsLogGroup:
    Type: String
    Description: 'Ecs log group name'
    
  ServiceEndpointToPdfRaster:
    Type: String
    Description: 'Endpoint FQDN of PDFRaster microservice'

Conditions:
  PnCoreTargetEventBusExists: !Not [ !Equals [!Ref PnCoreTargetEventBus, '' ] ]
  HasCloudTrailLogsBucketName: !Not [ !Equals [!Ref SafeStorageFileAccessLogsBucketName, '-' ] ]

Resources:

  # PN-TemplateBeMs microservice
  SafeStorageMicroservice:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub '${TemplateBucketBaseUrl}/fragments/ecs-service.yaml'
      Parameters:
        MicroServiceUniqueName: !Sub '${ProjectName}-safe-storage'
        CpuValue: !Ref CpuValue
        MemoryAmount: !Ref MemoryAmount
        AlarmSNSTopicArn: !Ref AlarmSNSTopicArn
        ContainerImageURI: !Sub '${ContainerImageUri}'
        ContainerEnvEntry1: !Sub 'AWS_REGIONCODE=${AWS::Region}'
        ContainerEnvEntry2: !Sub 'PnSsEventBusNameExternalNotification=${PnSsEventBusNameExternalNotification}'
        ContainerEnvEntry3: !Sub 'PnSsBucketName=${PnSsBucketName}'
        ContainerEnvEntry4: !Sub 'PnSsBucketArn=${PnSsBucketArn}'
        ContainerEnvEntry5: !Sub 'PnSsStagingBucketName=${PnSsStagingBucketName}'
        ContainerEnvEntry6: !Sub 'PnSsStagingBucketArn=${PnSsStagingBucketArn}'
        ContainerEnvEntry7: !Sub 'PnSsTableNameAnagraficaClient=${PnSsTableNameAnagraficaClient}'
        ContainerEnvEntry8: !Sub 'PnSsTableNameTipologieDocumenti=${PnSsTableNameTipologieDocumenti}'
        ContainerEnvEntry9: !Sub 'PnSsTableNameDocumenti=${PnSsTableNameDocumenti}'
        ContainerEnvEntry10: !Sub 'PnSsTableDocumentiStreamArn=${PnSsTableDocumentiStreamArn}'
        ContainerEnvEntry11: !Sub 'PnSsTableDocumentiStreamMetadatiTable=${PnSsTableDocumentiStreamMetadatiTable}'
        ContainerEnvEntry12: !Sub 'PnSsQueueNameStagingBucket=${PnSsQueueNameStagingBucket}'
        ContainerEnvEntry20: !Sub 'pst=${PresignedUrlMinutesLifespan}'
        ContainerEnvEntry21: !Sub 'stayHotTime=${PnSsUriBuilderstayHotTime}'
        ContainerEnvEntry22: 'PnSsBucketLockRetentionMode=GOVERNANCE'
        ContainerEnvEntry23: !Sub 'PnSsPreloadedDocsRetentionDays=${PnSsPreloadedDocsRetentionDays}'
        ContainerEnvEntry30: !Sub 'PnSsArubaCertId=${PnSsArubaCertId}'
        ContainerEnvEntry31: !Sub 'PnSsArubaEnabledLog=${PnSsArubaEnabledLog}'
        ContainerEnvEntry32: !Sub 'PnSsArubaSignWsdlUrl=${PnSsArubaSignWsdlUrl}'
        ContainerEnvEntry33: !Sub 'PnSsArubaQname=${PnSsArubaQname}'
        ContainerEnvEntry34: !Sub 'PnSsArubaSignService=${PnSsArubaSignService}'
        ContainerEnvEntry35: !Sub 'PnSsTsaIdentity=${PnSsTsaIdentity}'
        ContainerEnvEntry36: !Sub 'PnSsIdentitySignature=${PnSsIdentitySignature}'
        ContainerEnvEntry37: !Sub 'PnSsTimemarkUrl=${PnSsTimemarkUrl}'
        ContainerEnvEntry38: !Sub 'PnSsUriBuilderGetFileWithPatchConfiguration=${PnSsUriBuilderGetFileWithPatchConfiguration}'
        ContainerEnvEntry39: !Sub 'StateMachineBaseUrl=http://${ApplicationLoadBalancerDomain}:8080'
        ContainerEnvEntry40: !Sub 'InternalBaseUrl=http://${ApplicationLoadBalancerDomain}:8080'
        ContainerEnvEntry41: !Sub 'PnSsTaskExecutionPoolMaxSize=${PnSsTaskExecutionPoolMaxSize}'
        ContainerEnvEntry42: !Sub 'PnSignProviderSwitch=${PnSignProviderSwitch}'
        ContainerEnvEntry43: !Sub 'PnSsSignRetryStrategyMaxAttempts=${PnSsSignRetryStrategyMaxAttempts}'
        ContainerEnvEntry44: !Sub 'PnSsSignRetryStrategyMinBackoff=${PnSsSignRetryStrategyMinBackoff}'
        ContainerEnvEntry45: !Sub 'PnSsNamirialServerAddress=${PnSsNamirialServerAddress}'
        ContainerEnvEntry46: !Sub 'PnEcNamirialServerMaxConnections=${PnEcNamirialServerMaxConnections}'
        ContainerEnvEntry47: !Sub 'PnEcNamirialServerPendingAcquireTimeout=${PnEcNamirialServerPendingAcquireTimeout}'
        ContainerEnvEntry48: !Sub 'PnSsTableNameScadenzaDocumenti=${PnSsTableNameScadenzaDocumenti}'
        ContainerEnvEntry49: !Sub 'PnSsTableScadenzaDocumentiStreamArn=${PnSsTableScadenzaDocumentiStreamArn}'
        ContainerEnvEntry50: !Sub 'PnSsIgnoredUpdateMetadataList=${PnSsIgnoredUpdateMetadataList}'
        ContainerEnvEntry51: !Sub 'PnSsIndexingConfiguration=${PnSsIndexingConfiguration}'
        ContainerEnvEntry52: !Sub 'PnSsTableNameTags=${PnSsTableNameTags}'
        ContainerEnvEntry53: !Sub 'PnSsSafeClients=${PnSsSafeClients}'
        ContainerEnvEntry54: !Sub 'PnSsQueueNameAvailability=${PnSsQueueNameAvailability}'
        ContainerEnvEntry55: !Sub 'PnSsEventHandlerMaxMessages=${PnSsEventHandlerMaxMessages}'
        ContainerEnvEntry56: !Sub 'PnSsSqsRetryStrategyMinBackoff=${PnSsSqsRetryStrategyMinBackoff}'
        ContainerEnvEntry57: !Sub 'PnSsSqsRetryStrategyMaxAttempts=${PnSsSqsRetryStrategyMaxAttempts}'
        ContainerEnvEntry58: !Sub 'PdfRasterBaseUrl=http://${ServiceEndpointToPdfRaster}:8080'
        ContainerEnvEntry59: !Sub 'SignAndTimemarkMaxThreadPoolSize=${SignAndTimemarkMaxThreadPoolSize}'
        ContainerEnvEntry60: !Sub 'RasterMaxThreadPoolSize=${RasterMaxThreadPoolSize}'
        ContainerEnvEntry61: !Sub 'SpringCodecMaxInMemorySize=${SpringCodecMaxInMemorySize}'
        ContainerEnvEntry62: !Sub 'PnSsSignAndTimemarkMetricsSchema=${PnSsSignAndTimemarkMetricsSchema}'
        ContainerEnvEntry63: !Sub 'PnSsTransformationServiceMaxMessages=${PnSsTransformationServiceMaxMessages}'
        ContainerEnvEntry64: !Sub 'PnSsTaskExecutionPoolCoreSize=${PnSsTaskExecutionPoolCoreSize}'
        ContainerEnvEntry65: !Sub 'PnSsTaskExecutionPoolQueueCapacity=${PnSsTaskExecutionPoolQueueCapacity}'
        ContainerEnvEntry66: !Sub 'PnSsQueueNameDummyTranformation=${PnSsQueueNameDummyTranformation}'
        ContainerEnvEntry67: !Sub 'PnSsQueueNameSignAndTimemarkTranformation=${PnSsQueueNameSignAndTimemarkTranformation}'
        ContainerEnvEntry68: !Sub 'PnSsQueueNameSignTranformation=${PnSsQueueNameSignTranformation}'
        ContainerEnvEntry69: !Sub 'PnSsTransformationConfiguration=${PnSsTransformationConfiguration}'
        MappedPaths: '/safestorage/*,/safe-storage/*'
        ECSClusterName: !Ref ECSClusterName
        Subnets: !Ref VpcEgressSubnetsIds
        VpcId: !Ref VpcId
        EcsDefaultSecurityGroup: !Ref EcsDefaultSecurityGroup
        LoadBalancerListenerArn: !Ref ApplicationLoadBalancerListenerArn
        LoadbalancerRulePriority: !Ref MicroserviceNumber
        # CloudwatchLogKinesisStreamArn: !Ref LogsKinesisSourceStreamArn
        TaskRoleManagedPolicyArn: !Ref PnSsManagedPolicy
        LogAlarmStrategyV1: !Ref LogAlarmStrategy
        EcsLogGroup: !Ref EcsLogGroup
        AutoscalingThreshold: !Ref AutoscalingThreshold
        AutoscalingStrategy: REST-API
        MinTasksNumber: !Ref MinTasksNumber
        MaxTasksNumber: !Ref MaxTasksNumber
        JavaToolOptions: !Ref JavaToolOptions
        # HealthCheckPath:

  PnSsManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: 'String'
      ManagedPolicyName: !Ref PnSsManagedPolicyName
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'dynamodb:*GetItem'
              - 'dynamodb:Query'
              - 'dynamodb:Describe*'
              - 'dynamodb:Scan'
              - 'dynamodb:List*'
              - 'dynamodb:DeleteItem'
              - 'dynamodb:Batch*'
              - 'dynamodb:PartiQL*'
              - 'dynamodb:Update*'
              - 'dynamodb:Put*'
              - 'dynamodb:GetRecords'
              - 'dynamodb:GetShardIterator'
            Resource:
              - !Ref PnSsTableArnAnagraficaClient
              - !Ref PnSsTableArnTipologieDocumenti
              - !Ref PnSsTableArnDocumenti
              - !Ref PnSsTableDocumentiStreamArn
              - !Ref PnSsTableArnScadenzaDocumenti
              - !Ref PnSsTableArnTags
          - Sid: 'FullAccesStreamMetadataTable'
            Effect: Allow
            Action:
              - 'dynamodb:*'
            Resource:
              - !Join [ '', [ !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/' , !Ref PnSsTableDocumentiStreamMetadatiTable]]
          - Sid: 'CloudWatchPutMetricData'
            Effect: Allow
            Action:
              - 'cloudwatch:PutMetricData'
            Resource:
              - '*'
          - Effect: Allow
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
            Resource:
              - !Ref PCKmsEncDecDynamoDataKeyARN
          - Effect: Allow
            Action:
              - 's3:List*'
              - 's3:GetBucket*'
              - 's3:GetObject*'
              - 's3:*MultipartUpload*'
              - 's3:*LifecycleConfiguration'
              - 's3:*Replication*'
              - 's3:Replicate*'
              - 's3:PutBucket*'
              - 's3:PutObject*'
              - 's3:RestoreObject'
            Resource:
              - !Ref PnSsBucketArn
              - !Join [ '', [ !Sub '${PnSsBucketArn}' , '/*']]
              - !Ref PnSsStagingBucketArn
              - !Join [ '', [ !Sub '${PnSsStagingBucketArn}' , '/*']]
          - Effect: Allow
            Action:
              - 's3:List*'
              - 's3:GetBucket*'
              - 's3:GetObject*'
            Resource:
              - !Join [ '', [ 'arn:aws:s3:::pn-runtime-environment-variables-' , !Sub '${AWS::Region}-${AWS::AccountId}']]
              - !Join [ '', [ 'arn:aws:s3:::pn-runtime-environment-variables-' , !Sub '${AWS::Region}-${AWS::AccountId}', '/pn-safe-storage/*']]
          - Effect: Allow
            Action:
              - 'sqs:ReceiveMessage'
              - 'sqs:DeleteMessage'
              - 'sqs:Get*'
              - 'sqs:List*'
              - 'sqs:SendMessage'
            Resource:
              - !Ref PnSsQueueArnStagingBucket
              - !Ref PnSsQueueArnAvailability
          - Effect: Allow
            Sid: 'ReadFromSecretsManagerFirmaPEC'
            Action:
              - 'secretsmanager:DescribeSecret'
              - 'secretsmanager:GetSecretValue'
            Resource:
              - !Join [ '', [ !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:' , !Ref PnSsIdentitySignature , '*']]
          - Effect: Allow
            Action:
              - 'kms:Encrypt'
              - 'kms:Decrypt'
              - 'kms:ReEncrypt*'
              - 'kms:GenerateDataKey'
            Resource:
              - !Ref PnSsKmsArnBucket
          - Sid: 'AllowPutEventsDisponibilita'
            Effect: Allow
            Action:
              - 'events:PutEvents'
              - 'events:DescribeEventBus'
            Resource:
              - !Ref PnSsEventBusArnExternalNotification
          - Sid: 'ReadParameterStore'
            Effect: Allow
            Action:
              - 'ssm:GetParameter'
            Resource:
              - '*'

  #####    External notifications    #####
  PnSsRoleExternalNotifications:
    Type: AWS::IAM::Role
    Properties:
      Description: 'Role for forwarding Events to PnCoreTargetEventBus'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Action:
              - 'sts:AssumeRole'
            Principal:
              Service:
                - 'events.amazonaws.com'
      Policies:
        - PolicyName: 'PutEventsInlinePolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: 'PutEventsOnTargetAccount'
                Effect: Allow
                Action:
                  - 'events:PutEvents'
                Resource:
                  - !Ref PnCoreTargetEventBus
                  - !Ref ConfinfoEventBusArn
      # RoleName: PnSsRole

  PnSsQueuePolicyExternalNotifications:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref PnSsQueueUrlEventsDLQueuePnCoreTargetEventBus
      PolicyDocument:
        Statement:
          - Sid: 'AllowAccessSameAccount'
            Action:
              - 'sqs:ReceiveMessage'
              - 'sqs:GetQueueAttributes'
              - 'sqs:GetQueueUrl'
            Effect: "Allow"
            Resource: !Ref PnSsQueueArnEventsDLQueuePnCoreTargetEventBus
            Principal:
              AWS: !Ref AWS::AccountId
          - Sid: 'AllowPutEventsFromEventRule'
            Action:
              - 'sqs:SendMessage'
              - 'sqs:GetQueueAttributes'
              - 'sqs:GetQueueUrl'
            Effect: "Allow"
            Resource: !Ref PnSsQueueArnEventsDLQueuePnCoreTargetEventBus
            Principal:
              Service:
              - 'events.amazonaws.com'
            Condition:
              ArnEquals:
                aws:SourceArn: !GetAtt PnSsEventRuleExternalNotifications.Arn

  PnSsEventRuleExternalNotifications:
    Type: AWS::Events::Rule
    Properties:
      EventBusName: !Ref PnSsEventBusNameExternalNotification
      Description: 'Rule forwarding events to Pn Core EventBus'
      EventPattern:
        source:
          - "GESTORE DISPONIBILITA"
        account:
          - !Ref AWS::AccountId
        region:
          - !Ref AWS::Region
      State: 'ENABLED'
      Targets:
        - Arn: !Ref PnCoreTargetEventBus
          Id: 'PnSsExternalNotificationTarget'
          RoleArn: !GetAtt PnSsRoleExternalNotifications.Arn
          DeadLetterConfig:
            Arn: !Ref PnSsQueueArnEventsDLQueuePnCoreTargetEventBus
        - Arn: !Ref ConfinfoEventBusArn
          Id: 'PnConfinfoEventBusTarget'
          RoleArn: !GetAtt PnSsRoleExternalNotifications.Arn
          DeadLetterConfig:
            Arn: !Ref PnSsQueueArnEventsDLQueuePnCoreTargetEventBus

  #####    Metrics and Alarms  -  Microservice #####
  SafeStorageMicroserviceAlarm:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/microservice-alarm.yaml"
      Parameters:
        MicroserviceName: !Sub '${ProjectName}-safe-storage' # Must be identical to the one in the ecs-service stack
        EvaluationPeriod: '10'
        DatapointsToAlarm: '1'
        Threshold: '1'

  SafeStorageMicroserviceAlarmDashboard:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/microservice-cloudwatch-dashboard.yaml"
      Parameters:
        DashboardName: !Sub '${ProjectName}-safe-storage'
        AlarmArns:
          !Join
          - ','
          - - !GetAtt SafeStorageMicroserviceAlarm.Outputs.MicroserviceAlarmArn
            - !GetAtt SafeStorageMicroservice.Outputs.FatalLogsMetricAlarmArn
            - !Ref PnSsAlarmArnQueueStagingBucket
            - !Ref PnSsAlarmArnDLQueueStagingBucket
            - !Ref PnSsAlarmArnQueueGestoreBucketInvokeErrors
            - !Ref PnSsAlarmArnDLQueueGestoreBucketInvokeErrors
            - !Ref PnSsAlarmArnQueueGestoreBucketInvoke
            - !Ref PnSsAlarmArnDLQueueGestoreBucketInvoke
            - !Ref PnSsAlarmArnEventsDLQueuePnCoreTargetEventBus
            # - !GetAtt SafeStorageMicroservice.Outputs.AutoScalingAlarmArn
        DynamoDBTableNames:
          !Join
          - ','
          - - !Ref PnSsTableNameAnagraficaClient
            - !Ref PnSsTableNameTipologieDocumenti
            - !Ref PnSsTableNameDocumenti
            - !Ref PnSsTableNameScadenzaDocumenti
        # RestApiStageArns:
        # RestApiNames:
        QueueArns:
          !Join
          - ','
          - - !Ref PnSsQueueArnStagingBucket
            - !Ref PnSsQueueArnAvailability
            - !Ref PnSsQueueArnGestoreBucketInvoke
            - !Ref PnSsQueueArnGestoreBucketInvokeErrors
            - !Ref PnSsQueueArnEventsDLQueuePnCoreTargetEventBus
            - !Ref PnSsQueueArnScadenzaDocumentiDynamoStreamDLQ
        LambdaArns: !GetAtt PnSsGestoreBucket.Arn
        # KinesisDataArns:
        # KinesisFirehoseArns:
        BucketNames:
          !Join
          - ','
          - - !Ref PnSsBucketName
            - !Ref PnSsStagingBucketName

  #####    Bucket + Queue Policies   #####
  PnSsStagingBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref PnSsStagingBucketName
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 's3:*'
            Effect: Allow
            Resource: !Join [ '', [ !Sub '${PnSsStagingBucketArn}' , '/*']]
            Principal:
              AWS:
                - !Join [ '', [ !Sub 'arn:aws:iam::${AWS::AccountId}:role/' , !GetAtt SafeStorageMicroservice.Outputs.TaskRoleName]]

  PnSsQueuePolicyStagingBucket:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref PnSsQueueUrlStagingBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
            - 'sqs:SendMessage'
            - 'sqs:GetQueueAttributes'
            - 'sqs:GetQueueUrl'

            Effect: "Allow"
            Resource: !Ref PnSsQueueArnStagingBucket
            Principal:
              Service:
                - 'events.amazonaws.com'
            Condition:
              StringEquals:
                AWS:SourceAccount: !Ref AWS::AccountId
          - Action:
            - 'sqs:ReceiveMessage'
            - 'sqs:GetQueueAttributes'
            - 'sqs:GetQueueUrl'
            Effect: "Allow"
            Resource: !Ref PnSsQueueArnStagingBucket
            Principal:
              AWS:
                - !Join [ '', [ !Sub 'arn:aws:iam::${AWS::AccountId}:role/' , !GetAtt SafeStorageMicroservice.Outputs.TaskRoleName]]

  #####   Cloud Trail  +  Logging   #####
  SafeStorageCloudTrail:
    Condition: HasCloudTrailLogsBucketName
    Type: AWS::CloudTrail::Trail
    Properties:
      TrailName: !Ref TrailName
      IsMultiRegionTrail: false
      IsOrganizationTrail: false
      EnableLogFileValidation: false
      EventSelectors:
        - DataResources:
            - Type: AWS::S3::Object
              Values:
                - !Sub "arn:aws:s3:::${PnSsBucketName}/"
          IncludeManagementEvents: false
          ReadWriteType: All
      S3BucketName: !Ref SafeStorageFileAccessLogsBucketName
      S3KeyPrefix: !Ref SafeStorageFileAccessLogsBucketPathPrefix
      IsLogging: true

#####    Gestore Bucket e risorse a lui afferenti    #####
  PnSsQueuePolicyGestoreBucketInvokeErrors:
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues:
          - !Ref PnSsQueueUrlGestoreBucketInvokeErrors
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Action:
              - 'sqs:SendMessage'
              - 'sqs:GetQueueAttributes'
              - 'sqs:GetQueueUrl'
              Effect: "Allow"
              Resource: !Ref PnSsQueueArnGestoreBucketInvokeErrors
              Principal:
                AWS:
                  - !Join [ '', [ !Sub 'arn:aws:iam::${AWS::AccountId}:role/' , !Ref PnSsGestoreBucketRole]]

  PnSsGestoreBucketRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join [ '', [!Sub '${PnSsGestoreBucketLambdaName}', '-role']]
      Description: 'Ruolo della Lambda che implementa la funzionalità del Gestore Bucket'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action:
            - 'sts:AssumeRole'
      Policies:
        - PolicyName: 'PnSsGestoreBucketInlinePolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: 'GeneralBucketPolicy'
                Effect: 'Allow'
                Action:
                  - 's3:List*'
                  - 's3:GetBucket*'
                  - 's3:Put*'
                  - 's3:Describe*'
                  - 's3:Get*'
                  - 's3:*MultipartUpload*'
                  - 's3:*Tag*'
                Resource:
                  - !Ref PnSsBucketArn
                  - !Join [ '', [ !Sub '${PnSsBucketArn}' , '/*']]
              - Sid: 'QueueInvokeErrorsPolicyProducer'
                Effect: 'Allow'
                Action:
                  - 'sqs:SendMessage'
                  - 'sqs:Get*'
                Resource:
                  - !Ref PnSsQueueArnGestoreBucketInvokeErrors
              - Sid: 'GetInvokeSQS'
                Effect: 'Allow'
                Action:
                  - 'sqs:ReceiveMessage'
                  - 'sqs:DeleteMessage'
                  - 'sqs:Get*'
                  - 'sqs:List*'
                  - 'sqs:SendMessage'
                Resource:
                  - !Ref PnSsQueueArnGestoreBucketInvoke
              - Sid: 'DefaultKMSGrantRead'
                Effect: 'Allow'
                Action:
                  - 'kms:GenerateDataKey'
                  - 'kms:Decrypt'
                Resource: '*'
                Condition:
                  StringLike:
                    kms:RequestAlias: 'alias/aws/sqs'
              - Effect: Allow
                Action:
                  - 'kms:Encrypt'
                  - 'kms:Decrypt'
                  - 'kms:GenerateDataKey'
                Resource:
                  - !Ref PnSsKmsArnBucket

  PnSsSecurityGroupSafeStorage:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Security Group per la Lambda Gestore Bucket (SafeStorage)'
      GroupName: !Ref PnSsSecurityGroupNameSafeStorage
      SecurityGroupIngress:
        - IpProtocol: -1
          SourceSecurityGroupId: !Ref PnVPCDefaultSecurityGroup
      VpcId: !Ref VpcId

  PnSsQueuePolicyGestoreBucketInvoke:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref PnSsQueueUrlGestoreBucketInvoke
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
            - 'sqs:SendMessage'
            - 'sqs:GetQueueAttributes'
            - 'sqs:GetQueueUrl'

            Effect: "Allow"
            Resource: !Ref PnSsQueueArnGestoreBucketInvoke
            Principal:
              Service: 's3.amazonaws.com'
            Condition:
              StringEquals:
                AWS:SourceAccount: !Ref AWS::AccountId
          - Action:
            - 'sqs:ReceiveMessage'
            - 'sqs:GetQueueAttributes'
            - 'sqs:GetQueueUrl'
            Effect: "Allow"
            Resource: !Ref PnSsQueueArnGestoreBucketInvoke
            Principal:
              AWS:
                !GetAtt PnSsGestoreBucketRole.Arn

  PnSsGestoreBucketInputQueue:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 10 # 10 is default
      Enabled: True
      EventSourceArn: !Ref PnSsQueueArnGestoreBucketInvoke
      FunctionName: !Ref PnSsGestoreBucket
      FunctionResponseTypes:
        - ReportBatchItemFailures
      MaximumBatchingWindowInSeconds: 0 #default value
      ScalingConfig:
        MaximumConcurrency: !Ref PnSsGestoreBucketMinReservedConcurrentExecutions

  PnSsGestoreBucket:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref PnSsGestoreBucketLambdaName
      Description: 'Pn SafeStorage Gestore Bucket'
      Handler: index.handler
      MemorySize: 1024
      ReservedConcurrentExecutions: !Ref PnSsGestoreBucketMinReservedConcurrentExecutions
      Runtime: nodejs20.x
      Role: !GetAtt PnSsGestoreBucketRole.Arn
      Timeout: 240
      DeadLetterConfig:
        TargetArn: !Ref PnSsQueueArnGestoreBucketInvokeErrors
      VpcConfig:
        SubnetIds:
          - !Select [ 0, !Split [ ",", !Ref SubnetsIds ] ]
          - !Select [ 1, !Split [ ",", !Ref SubnetsIds ] ]
          - !Select [ 2, !Split [ ",", !Ref SubnetsIds ] ]
        SecurityGroupIds:
          - !GetAtt PnSsSecurityGroupSafeStorage.GroupId
      Environment:
        Variables:
          PnSsHostname: !Ref ApplicationLoadBalancerDomain
          PnSsGestoreRepositoryPort: !Ref PnSsGestoreRepositoryPort
          PnSsGestoreRepositoryProtocol: !Ref PnSsGestoreRepositoryProtocol
          PnSsGestoreRepositoryPathGetDocument: !Ref PnSsGestoreRepositoryPathGetDocument
          PnSsGestoreRepositoryPathPatchDocument: !Ref PnSsGestoreRepositoryPathPatchDocument
          PnSsStagingBucketName: !Ref PnSsStagingBucketName
          GestoreBucketGetObjectChunkSize: !Ref GestoreBucketGetObjectChunkSize
      Tags:
        - Key: "pn-eni-related"
          Value: "true"
        - Key: "pn-eni-related-groupName-regexp"
          Value: !Base64 "^pn-ss-gestore-bucket-sec-group.*$"
      Code:
        S3Bucket: !Ref MicroserviceBucketName
        S3Key: !Sub "${MicroserviceBucketBaseKey}/functions_zip/gestoreBucketEventHandler.zip"
      Layers:
        - !Sub "arn:aws:lambda:${AWS::Region}:339249233099:layer:LambdaInsightsExtension:13"

##### Gestore Bucket Concurrency Handler  #####

  PnSsGestoreBucketConcurrencyHandlerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join [ '', [ 'PnSsGestoreBucketConcurrencyHandler', '-role']]
      Description: 'Lambda Role to scale the number of concurrent instances of Lambda Gestore Bucket'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action:
            - 'sts:AssumeRole'
      Policies:
        - PolicyName: 'PnSsGestoreBucketConcurrencyHandlerInlinePolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: 'UpdateGestoreBucketConcurrency'
                Effect: 'Allow'
                Action:
                  - 'lambda:Get*'
                  - 'lambda:List*'
                  - 'lambda:PutFunctionConcurrency'
                Resource:
                  - !GetAtt PnSsGestoreBucket.Arn
              - Sid: 'UpdateGestoreBucketTrigger'
                Effect: 'Allow'
                Action:
                  - 'lambda:Get*'
                  - 'lambda:List*'
                  - 'lambda:UpdateEventSourceMapping'
                Resource:
                  - !GetAtt PnSsGestoreBucket.Arn
                  - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:event-source-mapping:${PnSsGestoreBucketInputQueue}'

  PnSsGestoreBucketConcurrencyHandler:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref PnSsGestoreBucketConcurrencyHandlerLambdaName
      Description: 'SafeStorage Concurrency Handler for Gestore Bucket'
      Handler: index.handler
      MemorySize: 256
      Runtime: nodejs20.x
      Role: !GetAtt PnSsGestoreBucketConcurrencyHandlerRole.Arn
      Timeout: 240
      ReservedConcurrentExecutions: 1
      VpcConfig:
        SubnetIds:
          - !Select [ 0, !Split [ ",", !Ref VpcEgressSubnetsIds ] ]
          - !Select [ 1, !Split [ ",", !Ref VpcEgressSubnetsIds ] ]
          - !Select [ 2, !Split [ ",", !Ref VpcEgressSubnetsIds ] ]
        SecurityGroupIds:
          - !GetAtt PnSsSecurityGroupSafeStorage.GroupId
      Environment:
        Variables:
          PnSsGestoreBucketTriggerId: !Ref PnSsGestoreBucketInputQueue
          PnSsGestoreBucketLambdaArn: !GetAtt PnSsGestoreBucket.Arn
          PnSsGestoreBucketInstancesPerTaskInstance: !Ref PnSsGestoreBucketInstancesPerTaskInstance
      Code:
        S3Bucket: !Ref MicroserviceBucketName
        S3Key: !Sub "${MicroserviceBucketBaseKey}/functions_zip/gestoreBucketConcurrencyHandler.zip"
      Layers:
        - !Sub "arn:aws:lambda:${AWS::Region}:339249233099:layer:LambdaInsightsExtension:13"

  PnSsEventRuleGestoreBucketConcurrencyHandler:
    Type: AWS::Events::Rule
    Properties:
      Name: !Ref PnSsEventRuleNameGestoreBucketConcurrencyHandler
      Description: 'Rule catching scaling events of the Safe Storage ECS cluster'
      EventPattern:
        detail:
          eventSource:
            - 'ecs.amazonaws.com'
          eventName:
            - 'UpdateService'
          responseElements:
            service:
              serviceArn:
                - !GetAtt SafeStorageMicroservice.Outputs.ServiceARN
      State: 'ENABLED'
      Targets:
        - Arn: !GetAtt PnSsGestoreBucketConcurrencyHandler.Arn
          Id: "GestoreBucketConcurrencyHandler"

  PnSsGestoreBucketConcurrencyHandlerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt PnSsGestoreBucketConcurrencyHandler.Arn
      Principal: 'events.amazonaws.com'
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !GetAtt PnSsEventRuleGestoreBucketConcurrencyHandler.Arn

  ######## Scadenza Documenti Lambda Handler  #########
  
  
  
  PnSsScadenzaDocumentiLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join [ '', [ !Sub '${PnSsScadenzaDocumentiLambdaName}', '-role' ] ]
      Description: 'Ruolo della Lambda che implementa la funzionalità di cancellazione dei Documenti'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: 'PnSsScadenzaDocumentiInlinePolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: 'DeleteBucketPolicy'
                Effect: 'Allow'
                Action:
                  - 's3:List*'
                  - 's3:GetBucket*'
                  - 's3:Describe*'
                  - 's3:*ObjectVersion*'
                  - 's3:DeleteObject*'
                Resource:
                  - !Ref PnSsBucketArn
                  - !Join [ '', [ !Sub '${PnSsBucketArn}' , '/*' ] ]
              - Sid: 'DynamoDbStreamPolicy'
                Effect: 'Allow'
                Action:
                  - 'dynamodb:DescribeStream'
                  - 'dynamodb:GetRecords'
                  - 'dynamodb:GetShardIterator'
                  - 'dynamodb:ListStreams'
                Resource:
                  - !Ref PnSsTableScadenzaDocumentiStreamArn
              - Sid: 'KmsSsBucketRead'
                Effect: Allow
                Action:
                  - 'kms:Decrypt'
                  - 'kms:GenerateDataKey'
                Resource:
                  - !Ref PnSsKmsArnBucket
              - Sid: 'SQSSendMessage'
                Effect: Allow
                Action:
                  - 'sqs:Get*'
                  - 'sqs:List*'
                  - 'sqs:SendMessage'
                Resource:
                  - !Ref PnSsQueueArnScadenzaDocumentiDynamoStreamDLQ

  PnSsScadenzaDocumentiEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 100
      BisectBatchOnFunctionError: true
      DestinationConfig:
        OnFailure:
          Destination: !Ref PnSsQueueArnScadenzaDocumentiDynamoStreamDLQ
      Enabled: True
      EventSourceArn: !Ref PnSsTableScadenzaDocumentiStreamArn
      StartingPosition: 'LATEST'
      FilterCriteria:
        Filters:
          - Pattern: '{"userIdentity": {"type": ["Service"], "principalId": ["dynamodb.amazonaws.com"]}}'
      FunctionName: !Ref PnSsScadenzaDocumentiEventHandlerLambda
      FunctionResponseTypes:
        - ReportBatchItemFailures
      MaximumBatchingWindowInSeconds: 60
      MaximumRetryAttempts: 10


  PnSsScadenzaDocumentiEventHandlerLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref PnSsScadenzaDocumentiLambdaName
      Runtime: nodejs20.x
      Handler: "index.handler"
      Role: !GetAtt PnSsScadenzaDocumentiLambdaRole.Arn
      Timeout: 240
      VpcConfig:
        SubnetIds:
          - !Select [ 0, !Split [ ",", !Ref SubnetsIds ] ]
          - !Select [ 1, !Split [ ",", !Ref SubnetsIds ] ]
          - !Select [ 2, !Split [ ",", !Ref SubnetsIds ] ]
        SecurityGroupIds:
          - !GetAtt PnSsSecurityGroupSafeStorage.GroupId
      Environment:
        Variables:
          PnSsBucketName: !Ref PnSsBucketName
          PnSsDocumentDeletionMode: !Ref PnSsDocumentDeletionMode
      Code:
        S3Bucket: !Ref MicroserviceBucketName
        S3Key: !Sub "${MicroserviceBucketBaseKey}/functions_zip/scadenzaDocumentiEventHandler.zip"
      Layers:
        - !Sub "arn:aws:lambda:${AWS::Region}:339249233099:layer:LambdaInsightsExtension:13"
        
        
  PnSsQueuePolicyScadenzaDocumentiDynamoStreamDLQ:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref PnSsQueueUrlScadenzaDocumentiDynamoStreamDLQ
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
            - 'sqs:SendMessage'
            - 'sqs:GetQueueAttributes'
            - 'sqs:GetQueueUrl'
            Effect: "Allow"
            Resource: !Ref PnSsQueueArnScadenzaDocumentiDynamoStreamDLQ
            Principal:
              AWS:
                !GetAtt PnSsScadenzaDocumentiLambdaRole.Arn
